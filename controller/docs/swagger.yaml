basePath: /api
definitions:
  models.Collection:
    properties:
      alias:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      ownerMail:
        type: string
      quality:
        type: integer
      tenantId:
        type: string
    type: object
  models.StorageLocation:
    properties:
      alias:
        type: string
      connection:
        type: string
      fillFirst:
        type: boolean
      id:
        type: string
      numberOfThreads:
        type: integer
      ocflType:
        type: string
      price:
        type: integer
      quality:
        type: integer
      securityCompliency:
        type: string
      tenantId:
        type: string
      type:
        type: string
      vault:
        $ref: '#/definitions/sql.NullString'
    type: object
  models.Tenant:
    properties:
      alias:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      person:
        type: string
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
host: localhost:8081
info:
  contact: {}
  description: API for DLZA-archive
  title: DLZA-archive API
  version: "1.0"
paths:
  /collection:
    patch:
      description: Update a collection
      operationId: update-collection
      parameters:
      - description: Update collection
        in: body
        name: collection's
        required: true
        schema:
          $ref: '#/definitions/models.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Update collection
    post:
      description: Add a new collection
      operationId: create-collection
      parameters:
      - description: Create collection
        in: body
        name: collection's
        required: true
        schema:
          $ref: '#/definitions/models.Collection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Create collection
  /collection/{id}:
    delete:
      description: Delete a collection
      operationId: delete-collection
      parameters:
      - description: collection ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Delete collection
    get:
      description: Finding collections by tenant id
      operationId: find-collections-tenant-id
      parameters:
      - description: tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Collection'
            type: array
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Find collections by tenant id
  /order:
    post:
      description: Copying all files from request
      operationId: copy-files
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Copy files
  /storage-location:
    post:
      description: Add a new storageLocation
      operationId: create-storageLocation
      parameters:
      - description: Create storageLocation
        in: body
        name: storageLocation's
        required: true
        schema:
          $ref: '#/definitions/models.StorageLocation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Create storageLocation
  /storage-location/{id}:
    delete:
      description: Delete a storageLocation
      operationId: delete-storageLocation
      parameters:
      - description: storage-location ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Delete storageLocation
    get:
      description: Finding all storageLocations for tenant ID
      operationId: find-all-storageLocations-for-tenant-id
      parameters:
      - description: tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StorageLocation'
            type: array
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Find all storageLocations for tenant ID
  /tenant:
    get:
      description: Finding all tenants
      operationId: find-all-tenants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tenant'
            type: array
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Find all tenants
    patch:
      description: Update a tenant
      operationId: update-tenant
      parameters:
      - description: Update tenant
        in: body
        name: tenant's
        required: true
        schema:
          $ref: '#/definitions/models.Tenant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Update tenant
    post:
      description: Add a new tenant
      operationId: create-tenant
      parameters:
      - description: Create tenant
        in: body
        name: tenant's
        required: true
        schema:
          $ref: '#/definitions/models.Tenant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Create tenant
  /tenant/{id}:
    delete:
      description: Delete a tenant
      operationId: delete-tenant
      parameters:
      - description: tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Delete tenant
    get:
      description: Finding a tenant by id
      operationId: find-tenant-by-id
      parameters:
      - description: tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tenant'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Find tenant by id
securityDefinitions:
  ApiKeyAuth:
    description: Bearer Authentication with JWT
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
