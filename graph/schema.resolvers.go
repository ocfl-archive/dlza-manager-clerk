package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"gitlab.switch.ch/ub-unibas/dlza/microservices/dlza-manager-clerk/graph/model"
	"gitlab.switch.ch/ub-unibas/dlza/microservices/dlza-manager-clerk/service"

	"emperror.dev/errors"
)

// Objects is the resolver for the objects field.
func (r *collectionResolver) Objects(ctx context.Context, obj *model.Collection, options *model.ObjectListOptions) (*model.ObjectList, error) {
	panic(fmt.Errorf("not implemented: Objects - objects"))
}

// ObjectInstances is the resolver for the objectInstances field.
func (r *objectResolver) ObjectInstances(ctx context.Context, obj *model.Object, options *model.ObjectInstanceListOptions) (*model.ObjectInstanceList, error) {
	panic(fmt.Errorf("not implemented: ObjectInstances - objectInstances"))
}

// Files is the resolver for the files field.
func (r *objectResolver) Files(ctx context.Context, obj *model.Object, options *model.FileListOptions) (*model.FileList, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// ObjectInstanceChecks is the resolver for the objectInstanceChecks field.
func (r *objectInstanceResolver) ObjectInstanceChecks(ctx context.Context, obj *model.ObjectInstance, options *model.ObjectInstanceCheckListOptions) (*model.ObjectInstanceCheckList, error) {
	panic(fmt.Errorf("not implemented: ObjectInstanceChecks - objectInstanceChecks"))
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context, options *model.TenantListOptions) (*model.TenantList, error) {
	tenants, err := service.GetTenants(ctx, r.ClientClerkHandler, options)
	if err != nil {
		return nil, errors.Wrapf(err, "Could not FindAllTenants: %v", err)
	}
	return tenants, nil
}

// Tenant is the resolver for the tenant field.
func (r *queryResolver) Tenant(ctx context.Context, id string) (*model.Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenant - tenant"))
}

// Collections is the resolver for the collections field.
func (r *queryResolver) Collections(ctx context.Context, options *model.CollectionListOptions) (*model.CollectionList, error) {
	panic(fmt.Errorf("not implemented: Collections - collections"))
}

// Collection is the resolver for the collection field.
func (r *queryResolver) Collection(ctx context.Context, id string) (*model.Collection, error) {
	panic(fmt.Errorf("not implemented: Collection - collection"))
}

// Objects is the resolver for the objects field.
func (r *queryResolver) Objects(ctx context.Context, options *model.ObjectListOptions) (*model.ObjectList, error) {
	panic(fmt.Errorf("not implemented: Objects - objects"))
}

// Object is the resolver for the object field.
func (r *queryResolver) Object(ctx context.Context, id string) (*model.Object, error) {
	panic(fmt.Errorf("not implemented: Object - object"))
}

// ObjectInstances is the resolver for the objectInstances field.
func (r *queryResolver) ObjectInstances(ctx context.Context, options *model.ObjectInstanceListOptions) (*model.ObjectInstanceList, error) {
	panic(fmt.Errorf("not implemented: ObjectInstances - objectInstances"))
}

// ObjectInstance is the resolver for the objectInstance field.
func (r *queryResolver) ObjectInstance(ctx context.Context, id string) (*model.ObjectInstance, error) {
	panic(fmt.Errorf("not implemented: ObjectInstance - objectInstance"))
}

// ObjectInstanceChecks is the resolver for the objectInstanceChecks field.
func (r *queryResolver) ObjectInstanceChecks(ctx context.Context, options *model.ObjectInstanceCheckListOptions) (*model.ObjectInstanceCheckList, error) {
	panic(fmt.Errorf("not implemented: ObjectInstanceChecks - objectInstanceChecks"))
}

// ObjectInstanceCheck is the resolver for the objectInstanceCheck field.
func (r *queryResolver) ObjectInstanceCheck(ctx context.Context, id string) (*model.ObjectInstanceCheck, error) {
	panic(fmt.Errorf("not implemented: ObjectInstanceCheck - objectInstanceCheck"))
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, options *model.FileListOptions) (*model.FileList, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// StorageLocations is the resolver for the storageLocations field.
func (r *queryResolver) StorageLocations(ctx context.Context, options model.StorageLocationListOptions) (*model.StorageLocationList, error) {
	panic(fmt.Errorf("not implemented: StorageLocations - storageLocations"))
}

// StorageLocation is the resolver for the storageLocation field.
func (r *queryResolver) StorageLocation(ctx context.Context, id string) (*model.StorageLocation, error) {
	panic(fmt.Errorf("not implemented: StorageLocation - storageLocation"))
}

// StoragePartitions is the resolver for the storagePartitions field.
func (r *queryResolver) StoragePartitions(ctx context.Context, options *model.StoragePartitionListOptions) (*model.StoragePartitionList, error) {
	panic(fmt.Errorf("not implemented: StoragePartitions - storagePartitions"))
}

// StoragePartition is the resolver for the storagePartition field.
func (r *queryResolver) StoragePartition(ctx context.Context, id string) (*model.StoragePartition, error) {
	panic(fmt.Errorf("not implemented: StoragePartition - storagePartition"))
}

// StoragePartitions is the resolver for the storagePartitions field.
func (r *storageLocationResolver) StoragePartitions(ctx context.Context, obj *model.StorageLocation, options *model.StoragePartitionListOptions) (*model.StoragePartitionList, error) {
	panic(fmt.Errorf("not implemented: StoragePartitions - storagePartitions"))
}

// ObjectInstances is the resolver for the objectInstances field.
func (r *storagePartitionResolver) ObjectInstances(ctx context.Context, obj *model.StoragePartition, options *model.ObjectInstanceListOptions) (*model.ObjectInstanceList, error) {
	panic(fmt.Errorf("not implemented: ObjectInstances - objectInstances"))
}

// Collections is the resolver for the collections field.
func (r *tenantResolver) Collections(ctx context.Context, obj *model.Tenant, options *model.CollectionListOptions) (*model.CollectionList, error) {
	collections, err := service.GetCollectionsForTenant(ctx, r.ClientClerkHandler, obj, options)
	if err != nil {
		return nil, errors.Wrapf(err, "Could not collections: %v", err)
	}
	return collections, nil
}

// StorageLocations is the resolver for the storageLocations field.
func (r *tenantResolver) StorageLocations(ctx context.Context, obj *model.Tenant, options *model.StorageLocationListOptions) (*model.StorageLocationList, error) {
	storageLocations, err := service.GetStorageLocationsForTenant(ctx, r.ClientClerkHandler, obj, options)
	if err != nil {
		return nil, errors.Wrapf(err, "Could not storageLocations: %v", err)
	}
	return storageLocations, nil
}

// Collection returns CollectionResolver implementation.
func (r *Resolver) Collection() CollectionResolver { return &collectionResolver{r} }

// Object returns ObjectResolver implementation.
func (r *Resolver) Object() ObjectResolver { return &objectResolver{r} }

// ObjectInstance returns ObjectInstanceResolver implementation.
func (r *Resolver) ObjectInstance() ObjectInstanceResolver { return &objectInstanceResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// StorageLocation returns StorageLocationResolver implementation.
func (r *Resolver) StorageLocation() StorageLocationResolver { return &storageLocationResolver{r} }

// StoragePartition returns StoragePartitionResolver implementation.
func (r *Resolver) StoragePartition() StoragePartitionResolver { return &storagePartitionResolver{r} }

// Tenant returns TenantResolver implementation.
func (r *Resolver) Tenant() TenantResolver { return &tenantResolver{r} }

type collectionResolver struct{ *Resolver }
type objectResolver struct{ *Resolver }
type objectInstanceResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type storageLocationResolver struct{ *Resolver }
type storagePartitionResolver struct{ *Resolver }
type tenantResolver struct{ *Resolver }
