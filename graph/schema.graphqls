# go run github.com/99designs/gqlgen generate

interface Node {
  id: ID!
}
interface PaginatedList {
  items: [Node!]!
  totalItems: Int!
}
enum SortDirection {
  ASCENDING
  DESCENDING
}

type TenantList implements PaginatedList {
  items: [Tenant!]!
  totalItems: Int!
}
type CollectionList implements PaginatedList {
  items: [Collection!]!
  totalItems: Int!
}
type StorageLocationList implements PaginatedList {
  items: [StorageLocation!]!
  totalItems: Int!
}
type StoragePartitionList implements PaginatedList {
  items: [StoragePartition!]!
  totalItems: Int!
}
type ObjectList implements PaginatedList {
  items: [Object!]!
  totalItems: Int!
}
type ObjectInstanceList implements PaginatedList {
  items: [ObjectInstance!]!
  totalItems: Int!
}
type ObjectInstanceCheckList implements PaginatedList {
  items: [ObjectInstanceCheck!]!
  totalItems: Int!
}
type FileList implements PaginatedList {
  items: [File!]!
  totalItems: Int!
}

input TenantListOptions {
  # Skips the first n results, for use in pagination
  skip: Int

  # Takes n results, for use in pagination
  take: Int

  # Specifies the sort direction
  sortDirection: SortDirection

  # Specifies the sort key
  sortKey: TenantSortKey
  # id, alias, name, email, person
  search: String
}
input CollectionListOptions {
  tenantId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: CollectionSortKey
  #  id, alias, description, owner, ownerMail, name
  search: String
}
input StorageLocationListOptions {
  tenantId: ID
  collectionId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: StorageLocationSortKey
  #  id, alias, securityCompliency
  search: String
}
input StoragePartitionListOptions {
  tenantId: ID
  storageLocationId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: StoragePartitionSortKey
  #  id, alias, name
  search: String
}
input ObjectListOptions {
  tenantId: ID
  collectionId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: ObjectSortKey
  #  id, signature, title, description, ingestWorkflow, user, address, checksum, authors, holding
  search: String
}
input ObjectInstanceListOptions {
  tenantId: ID
  ObjectId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: ObjectInstanceSortKey
  #  id, path, status
  search: String
}
input ObjectInstanceCheckListOptions {
  tenantId: ID
  objectInstanceId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: ObjectInstanceCheckSortKey
  #  id, message
  search: String
}
input FileListOptions {
  tenantId: ID
  objectId: ID
  collectionId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: FileSortKey
  #  id, checksum, mimeType, pronom, name
  search: String
}

enum TenantSortKey {
  id,
  name,
  alias,
  person,
  email
}
enum CollectionSortKey {
  id,
  name,
  alias,
  description,
  owner,
  ownerMail,
  totalFileSize,
  totalFileCount,
  totalObjectCount
}
enum StorageLocationSortKey {
  id,
  alias,
  securityCompliency,
  totalFilesSize,
  totalExistingVolume
}
enum StoragePartitionSortKey {
  id,
  alias,
  name
}
enum ObjectSortKey {
  id,
  signature,
  title,
  description,
  ingestWorkflow,
  user,
  address,
  checksum,
  keywords,
  identifiers,
  alternativeTitles,
  size,
  totalFileSize,
  totalFileCount,
  holding,
  authors
}
enum ObjectInstanceSortKey {
  id,
  path,
  status
}
enum ObjectInstanceCheckSortKey {
  id,
  message,
  checktime
}
enum FileSortKey {
  id,
  checksum,
  mimeType,
  pronom,
  name,
  size
}

type Tenant implements Node {
  id: ID!
  name: String!
  alias: String!
  person: String!
  email: String!
  totalSize: Int!
  totalAmountOfObjects: Int!
  collections(options: CollectionListOptions): CollectionList!
  storageLocations(options: StorageLocationListOptions): StorageLocationList!
  permissions: [String!]
}

type Collection implements Node {
  id: ID!
  alias: String!
  description: String!
  owner: String!
  ownerMail: String!
  name: String!
  quality: Int!
  tenantId: ID!
  tenant: Tenant!
  objects(options: ObjectListOptions): ObjectList!
  files(options: FileListOptions): FileList!
  totalFileSize: Int!
  totalFileCount: Int!
  totalObjectCount: Int!
  amountOfErrors: Int!
}

input CollectionInput {
  id: ID!
  alias: String!
  description: String!
  owner: String!
  ownerMail: String!
  name: String!
  quality: Int!
  tenantId: ID!
}

type StorageLocation implements Node {
  id: ID!
  alias: String!
  type: String!
  vault: String!
  connection: String!
  quality: Int!
  price: Int!
  securityCompliency: String!
  fillFirst: Boolean!
  ocflType: String!
  tenantId: ID!
  tenant: Tenant!
  numberOfThreads: Int!
  totalFilesSize: Int!
  totalExistingVolume: Int!
  storagePartitions(options: StoragePartitionListOptions): StoragePartitionList!
  amountOfErrors: Int!
  amountOfObjects: Int!
}

input StorageLocationInput {
  id: ID!
  alias: String!
  type: String!
  vault: String!
  connection: String!
  quality: Int!
  price: Int!
  securityCompliency: String!
  fillFirst: Boolean!
  ocflType: String!
  tenantId: ID!
  numberOfThreads: Int!
}

type StoragePartition implements Node {
  id: ID!
  alias: String!
  name: String!
  maxSize: Int!
  maxObjects: Int!
  currentSize: Int!
  currentObjects: Int!
  storageLocationId: ID!
  storageLocation: StorageLocation!
  objectInstances(options: ObjectInstanceListOptions):ObjectInstanceList!
}

input StoragePartitionInput {
  id: ID!
  alias: String!
  name: String!
  maxSize: Int!
  maxObjects: Int!
  currentSize: Int!
  currentObjects: Int!
  storageLocationId: ID!
}

type Object implements Node {
  id: ID!
  signature: String!
  sets: [String!]!
  identifiers: [String!]!
  title: String!
  alternativeTitles: [String!]!
  description: String!
  keywords: [String!]!
  references: [String!]!
  ingestWorkflow: String!
  user: String!
  address: String!
  created: String!
  lastChanged: String!
  expiration: String!
  authors: [String!]!
  holding: String!
  size: Int!
  collectionId: ID!
  collection: Collection!
  checksum: String!
  objectInstances(options: ObjectInstanceListOptions): ObjectInstanceList!
  files(options: FileListOptions): FileList!
  totalFileSize: Int!
  totalFileCount: Int!
  status: Int!
}
type ObjectInstance implements Node {
  id: ID!
  path: String!
  created: String!
  status: String!
  size: Int!
  storagePartitionId: ID!
  storagePartition: StoragePartition!
  objectId: ID!
  object: Object!
  objectInstanceChecks(options: ObjectInstanceCheckListOptions): ObjectInstanceCheckList!
}
type File implements Node {
  id: ID!
  checksum: String!
  name: [String!]!
  mimeType: String!
  size: Int!
  pronom: String!
  width: Int!
  height: Int!
  duration: Int!
  objectId: ID!
  object: Object!
}

type ObjectInstanceCheck implements Node {
  id: ID!
  checktime: String!
  error: Boolean!
  message: String!
  objectInstanceId: ID!
  objectInstance: ObjectInstance!
}

type MimeType implements Node {
  id: ID!
  fileCount: Int!
}

type MimeTypeList implements PaginatedList {
  items: [MimeType!]!
  totalItems: Int!
}
enum MimeTypeSortKey {
  id
  fileCount
}

input MimeTypeListOptions {
  tenantId: ID
  collectionId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: MimeTypeSortKey
}

type PronomId implements Node {
  id: ID!
  fileCount: Int!
}

type PronomIdList implements PaginatedList {
  items: [PronomId!]!
  # total of aggregation, not files
  totalItems: Int!
}

enum PronomIdSortKey {
  id
  fileCount
}

input PronomIdListOptions {
  tenantId: ID
  # filter by collection
  collectionId: ID
  skip: Int
  take: Int
  sortDirection: SortDirection
  sortKey: PronomIdSortKey
}

type User {
  username: String! 
  email: String!
  id:String!
  tenants: [Tenant!]!
}

type Auth {
  authCodeUrl: String!
}
type Query {
  auth: Auth!
  user: User
  tenants(options: TenantListOptions): TenantList!
  tenant(id: ID!): Tenant

  collections(options: CollectionListOptions): CollectionList!
  collection(id: ID!): Collection

  objects(options: ObjectListOptions): ObjectList!
  object(id: ID!): Object

  objectInstances(options: ObjectInstanceListOptions): ObjectInstanceList!
  objectInstance(id: ID!): ObjectInstance

  objectInstanceChecks(options: ObjectInstanceCheckListOptions): ObjectInstanceCheckList!
  objectInstanceCheck(id: ID!): ObjectInstanceCheck

  files(options: FileListOptions): FileList!
  file(id: ID!): File

  storageLocations(options: StorageLocationListOptions): StorageLocationList!
  storageLocation(id: ID!): StorageLocation

  storagePartitions(options: StoragePartitionListOptions): StoragePartitionList!
  storagePartition(id: ID!): StoragePartition

  mimeTypes(options: MimeTypeListOptions): MimeTypeList!
  pronomIds(options: PronomIdListOptions): PronomIdList!
}

type Mutation {
  login(code: String!): User!
  logout: Boolean!

  createCollection(input: CollectionInput): Collection!
  updateCollection(input: CollectionInput): Collection!
  deleteCollection(id: ID!): Collection!

  createStorageLocation(input: StorageLocationInput): StorageLocation!
  updateStorageLocation(input: StorageLocationInput): StorageLocation!
  deleteStorageLocation(id: ID!): StorageLocation!

  createStoragePartition(input: StoragePartitionInput): StoragePartition!
  updateStoragePartition(input: StoragePartitionInput): StoragePartition!
  deleteStoragePartition(id: ID!): StoragePartition!
}