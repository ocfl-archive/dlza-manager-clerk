// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UploaderIngestServiceClient is the client API for UploaderIngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderIngestServiceClient interface {
	CopyFile(ctx context.Context, in *IncomingOrder, opts ...grpc.CallOption) (*Status, error)
}

type uploaderIngestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderIngestServiceClient(cc grpc.ClientConnInterface) UploaderIngestServiceClient {
	return &uploaderIngestServiceClient{cc}
}

func (c *uploaderIngestServiceClient) CopyFile(ctx context.Context, in *IncomingOrder, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/UploaderIngestService/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderIngestServiceServer is the server API for UploaderIngestService service.
// All implementations must embed UnimplementedUploaderIngestServiceServer
// for forward compatibility
type UploaderIngestServiceServer interface {
	CopyFile(context.Context, *IncomingOrder) (*Status, error)
	mustEmbedUnimplementedUploaderIngestServiceServer()
}

// UnimplementedUploaderIngestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderIngestServiceServer struct {
}

func (UnimplementedUploaderIngestServiceServer) CopyFile(context.Context, *IncomingOrder) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedUploaderIngestServiceServer) mustEmbedUnimplementedUploaderIngestServiceServer() {}

// UnsafeUploaderIngestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderIngestServiceServer will
// result in compilation errors.
type UnsafeUploaderIngestServiceServer interface {
	mustEmbedUnimplementedUploaderIngestServiceServer()
}

func RegisterUploaderIngestServiceServer(s grpc.ServiceRegistrar, srv UploaderIngestServiceServer) {
	s.RegisterService(&UploaderIngestService_ServiceDesc, srv)
}

func _UploaderIngestService_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderIngestServiceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploaderIngestService/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderIngestServiceServer).CopyFile(ctx, req.(*IncomingOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// UploaderIngestService_ServiceDesc is the grpc.ServiceDesc for UploaderIngestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploaderIngestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UploaderIngestService",
	HandlerType: (*UploaderIngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyFile",
			Handler:    _UploaderIngestService_CopyFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}

// UploaderHandlerServiceClient is the client API for UploaderHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderHandlerServiceClient interface {
	TenantHasAccess(ctx context.Context, in *UploaderAccessObject, opts ...grpc.CallOption) (*Status, error)
	SaveObjectAndFiles(ctx context.Context, in *ObjectAndFiles, opts ...grpc.CallOption) (*Id, error)
	AlterStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Status, error)
}

type uploaderHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderHandlerServiceClient(cc grpc.ClientConnInterface) UploaderHandlerServiceClient {
	return &uploaderHandlerServiceClient{cc}
}

func (c *uploaderHandlerServiceClient) TenantHasAccess(ctx context.Context, in *UploaderAccessObject, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/UploaderHandlerService/TenantHasAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderHandlerServiceClient) SaveObjectAndFiles(ctx context.Context, in *ObjectAndFiles, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/UploaderHandlerService/SaveObjectAndFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploaderHandlerServiceClient) AlterStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/UploaderHandlerService/AlterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploaderHandlerServiceServer is the server API for UploaderHandlerService service.
// All implementations must embed UnimplementedUploaderHandlerServiceServer
// for forward compatibility
type UploaderHandlerServiceServer interface {
	TenantHasAccess(context.Context, *UploaderAccessObject) (*Status, error)
	SaveObjectAndFiles(context.Context, *ObjectAndFiles) (*Id, error)
	AlterStatus(context.Context, *StatusObject) (*Status, error)
	mustEmbedUnimplementedUploaderHandlerServiceServer()
}

// UnimplementedUploaderHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploaderHandlerServiceServer struct {
}

func (UnimplementedUploaderHandlerServiceServer) TenantHasAccess(context.Context, *UploaderAccessObject) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantHasAccess not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) SaveObjectAndFiles(context.Context, *ObjectAndFiles) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveObjectAndFiles not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) AlterStatus(context.Context, *StatusObject) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedUploaderHandlerServiceServer) mustEmbedUnimplementedUploaderHandlerServiceServer() {
}

// UnsafeUploaderHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderHandlerServiceServer will
// result in compilation errors.
type UnsafeUploaderHandlerServiceServer interface {
	mustEmbedUnimplementedUploaderHandlerServiceServer()
}

func RegisterUploaderHandlerServiceServer(s grpc.ServiceRegistrar, srv UploaderHandlerServiceServer) {
	s.RegisterService(&UploaderHandlerService_ServiceDesc, srv)
}

func _UploaderHandlerService_TenantHasAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploaderAccessObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).TenantHasAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploaderHandlerService/TenantHasAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).TenantHasAccess(ctx, req.(*UploaderAccessObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderHandlerService_SaveObjectAndFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectAndFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).SaveObjectAndFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploaderHandlerService/SaveObjectAndFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).SaveObjectAndFiles(ctx, req.(*ObjectAndFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploaderHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploaderHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UploaderHandlerService/AlterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploaderHandlerServiceServer).AlterStatus(ctx, req.(*StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

// UploaderHandlerService_ServiceDesc is the grpc.ServiceDesc for UploaderHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploaderHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UploaderHandlerService",
	HandlerType: (*UploaderHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantHasAccess",
			Handler:    _UploaderHandlerService_TenantHasAccess_Handler,
		},
		{
			MethodName: "SaveObjectAndFiles",
			Handler:    _UploaderHandlerService_SaveObjectAndFiles_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _UploaderHandlerService_AlterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}

// ClerkIngestServiceClient is the client API for ClerkIngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkIngestServiceClient interface {
	CreateStoragePartition(ctx context.Context, in *StoragePartition, opts ...grpc.CallOption) (*Status, error)
}

type clerkIngestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkIngestServiceClient(cc grpc.ClientConnInterface) ClerkIngestServiceClient {
	return &clerkIngestServiceClient{cc}
}

func (c *clerkIngestServiceClient) CreateStoragePartition(ctx context.Context, in *StoragePartition, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkIngestService/CreateStoragePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkIngestServiceServer is the server API for ClerkIngestService service.
// All implementations must embed UnimplementedClerkIngestServiceServer
// for forward compatibility
type ClerkIngestServiceServer interface {
	CreateStoragePartition(context.Context, *StoragePartition) (*Status, error)
	mustEmbedUnimplementedClerkIngestServiceServer()
}

// UnimplementedClerkIngestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkIngestServiceServer struct {
}

func (UnimplementedClerkIngestServiceServer) CreateStoragePartition(context.Context, *StoragePartition) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoragePartition not implemented")
}
func (UnimplementedClerkIngestServiceServer) mustEmbedUnimplementedClerkIngestServiceServer() {}

// UnsafeClerkIngestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkIngestServiceServer will
// result in compilation errors.
type UnsafeClerkIngestServiceServer interface {
	mustEmbedUnimplementedClerkIngestServiceServer()
}

func RegisterClerkIngestServiceServer(s grpc.ServiceRegistrar, srv ClerkIngestServiceServer) {
	s.RegisterService(&ClerkIngestService_ServiceDesc, srv)
}

func _ClerkIngestService_CreateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkIngestServiceServer).CreateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkIngestService/CreateStoragePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkIngestServiceServer).CreateStoragePartition(ctx, req.(*StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkIngestService_ServiceDesc is the grpc.ServiceDesc for ClerkIngestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkIngestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClerkIngestService",
	HandlerType: (*ClerkIngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStoragePartition",
			Handler:    _ClerkIngestService_CreateStoragePartition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}

// IngestHandlerServiceClient is the client API for IngestHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestHandlerServiceClient interface {
	GetStorageLocationsByCollectionAlias(ctx context.Context, in *CollectionAlias, opts ...grpc.CallOption) (*StorageLocations, error)
	GetCurrentStorageLocationsByCollectionAlias(ctx context.Context, in *CollectionAlias, opts ...grpc.CallOption) (*StorageLocations, error)
	GetStoragePartitionForLocation(ctx context.Context, in *SizeAndId, opts ...grpc.CallOption) (*StoragePartition, error)
	SaveInstanceAndUpdatePartition(ctx context.Context, in *InstanceAndPartition, opts ...grpc.CallOption) (*Status, error)
	GetStorageLocationById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StorageLocation, error)
	GetAndSaveStoragePartitionWithRelevantAlias(ctx context.Context, in *StoragePartition, opts ...grpc.CallOption) (*StoragePartition, error)
	UpdateStoragePartition(ctx context.Context, in *StoragePartition, opts ...grpc.CallOption) (*Status, error)
	GetObjectsByCollectionAlias(ctx context.Context, in *CollectionAlias, opts ...grpc.CallOption) (*Objects, error)
	GetObjectsInstancesByObjectId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ObjectInstances, error)
	CreateObjectInstance(ctx context.Context, in *ObjectInstance, opts ...grpc.CallOption) (*Id, error)
	GetStoragePartitionsByStorageLocationId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StoragePartitions, error)
	DeleteObjectInstance(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
	AlterStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Status, error)
}

type ingestHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestHandlerServiceClient(cc grpc.ClientConnInterface) IngestHandlerServiceClient {
	return &ingestHandlerServiceClient{cc}
}

func (c *ingestHandlerServiceClient) GetStorageLocationsByCollectionAlias(ctx context.Context, in *CollectionAlias, opts ...grpc.CallOption) (*StorageLocations, error) {
	out := new(StorageLocations)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetStorageLocationsByCollectionAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetCurrentStorageLocationsByCollectionAlias(ctx context.Context, in *CollectionAlias, opts ...grpc.CallOption) (*StorageLocations, error) {
	out := new(StorageLocations)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetCurrentStorageLocationsByCollectionAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetStoragePartitionForLocation(ctx context.Context, in *SizeAndId, opts ...grpc.CallOption) (*StoragePartition, error) {
	out := new(StoragePartition)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetStoragePartitionForLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) SaveInstanceAndUpdatePartition(ctx context.Context, in *InstanceAndPartition, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/SaveInstanceAndUpdatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetStorageLocationById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StorageLocation, error) {
	out := new(StorageLocation)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetStorageLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetAndSaveStoragePartitionWithRelevantAlias(ctx context.Context, in *StoragePartition, opts ...grpc.CallOption) (*StoragePartition, error) {
	out := new(StoragePartition)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetAndSaveStoragePartitionWithRelevantAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) UpdateStoragePartition(ctx context.Context, in *StoragePartition, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/UpdateStoragePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetObjectsByCollectionAlias(ctx context.Context, in *CollectionAlias, opts ...grpc.CallOption) (*Objects, error) {
	out := new(Objects)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetObjectsByCollectionAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetObjectsInstancesByObjectId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ObjectInstances, error) {
	out := new(ObjectInstances)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetObjectsInstancesByObjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) CreateObjectInstance(ctx context.Context, in *ObjectInstance, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/CreateObjectInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) GetStoragePartitionsByStorageLocationId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StoragePartitions, error) {
	out := new(StoragePartitions)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/GetStoragePartitionsByStorageLocationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) DeleteObjectInstance(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/DeleteObjectInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestHandlerServiceClient) AlterStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/IngestHandlerService/AlterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestHandlerServiceServer is the server API for IngestHandlerService service.
// All implementations must embed UnimplementedIngestHandlerServiceServer
// for forward compatibility
type IngestHandlerServiceServer interface {
	GetStorageLocationsByCollectionAlias(context.Context, *CollectionAlias) (*StorageLocations, error)
	GetCurrentStorageLocationsByCollectionAlias(context.Context, *CollectionAlias) (*StorageLocations, error)
	GetStoragePartitionForLocation(context.Context, *SizeAndId) (*StoragePartition, error)
	SaveInstanceAndUpdatePartition(context.Context, *InstanceAndPartition) (*Status, error)
	GetStorageLocationById(context.Context, *Id) (*StorageLocation, error)
	GetAndSaveStoragePartitionWithRelevantAlias(context.Context, *StoragePartition) (*StoragePartition, error)
	UpdateStoragePartition(context.Context, *StoragePartition) (*Status, error)
	GetObjectsByCollectionAlias(context.Context, *CollectionAlias) (*Objects, error)
	GetObjectsInstancesByObjectId(context.Context, *Id) (*ObjectInstances, error)
	CreateObjectInstance(context.Context, *ObjectInstance) (*Id, error)
	GetStoragePartitionsByStorageLocationId(context.Context, *Id) (*StoragePartitions, error)
	DeleteObjectInstance(context.Context, *Id) (*Status, error)
	AlterStatus(context.Context, *StatusObject) (*Status, error)
	mustEmbedUnimplementedIngestHandlerServiceServer()
}

// UnimplementedIngestHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngestHandlerServiceServer struct {
}

func (UnimplementedIngestHandlerServiceServer) GetStorageLocationsByCollectionAlias(context.Context, *CollectionAlias) (*StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByCollectionAlias not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetCurrentStorageLocationsByCollectionAlias(context.Context, *CollectionAlias) (*StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentStorageLocationsByCollectionAlias not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetStoragePartitionForLocation(context.Context, *SizeAndId) (*StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionForLocation not implemented")
}
func (UnimplementedIngestHandlerServiceServer) SaveInstanceAndUpdatePartition(context.Context, *InstanceAndPartition) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInstanceAndUpdatePartition not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetStorageLocationById(context.Context, *Id) (*StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationById not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetAndSaveStoragePartitionWithRelevantAlias(context.Context, *StoragePartition) (*StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAndSaveStoragePartitionWithRelevantAlias not implemented")
}
func (UnimplementedIngestHandlerServiceServer) UpdateStoragePartition(context.Context, *StoragePartition) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoragePartition not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetObjectsByCollectionAlias(context.Context, *CollectionAlias) (*Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByCollectionAlias not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetObjectsInstancesByObjectId(context.Context, *Id) (*ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInstancesByObjectId not implemented")
}
func (UnimplementedIngestHandlerServiceServer) CreateObjectInstance(context.Context, *ObjectInstance) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectInstance not implemented")
}
func (UnimplementedIngestHandlerServiceServer) GetStoragePartitionsByStorageLocationId(context.Context, *Id) (*StoragePartitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionsByStorageLocationId not implemented")
}
func (UnimplementedIngestHandlerServiceServer) DeleteObjectInstance(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectInstance not implemented")
}
func (UnimplementedIngestHandlerServiceServer) AlterStatus(context.Context, *StatusObject) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedIngestHandlerServiceServer) mustEmbedUnimplementedIngestHandlerServiceServer() {}

// UnsafeIngestHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestHandlerServiceServer will
// result in compilation errors.
type UnsafeIngestHandlerServiceServer interface {
	mustEmbedUnimplementedIngestHandlerServiceServer()
}

func RegisterIngestHandlerServiceServer(s grpc.ServiceRegistrar, srv IngestHandlerServiceServer) {
	s.RegisterService(&IngestHandlerService_ServiceDesc, srv)
}

func _IngestHandlerService_GetStorageLocationsByCollectionAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetStorageLocationsByCollectionAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetStorageLocationsByCollectionAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetStorageLocationsByCollectionAlias(ctx, req.(*CollectionAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetCurrentStorageLocationsByCollectionAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetCurrentStorageLocationsByCollectionAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetCurrentStorageLocationsByCollectionAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetCurrentStorageLocationsByCollectionAlias(ctx, req.(*CollectionAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetStoragePartitionForLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SizeAndId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetStoragePartitionForLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetStoragePartitionForLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetStoragePartitionForLocation(ctx, req.(*SizeAndId))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_SaveInstanceAndUpdatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceAndPartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).SaveInstanceAndUpdatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/SaveInstanceAndUpdatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).SaveInstanceAndUpdatePartition(ctx, req.(*InstanceAndPartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetStorageLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetStorageLocationById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetAndSaveStoragePartitionWithRelevantAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetAndSaveStoragePartitionWithRelevantAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetAndSaveStoragePartitionWithRelevantAlias(ctx, req.(*StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_UpdateStoragePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragePartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).UpdateStoragePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/UpdateStoragePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).UpdateStoragePartition(ctx, req.(*StoragePartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetObjectsByCollectionAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetObjectsByCollectionAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetObjectsByCollectionAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetObjectsByCollectionAlias(ctx, req.(*CollectionAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetObjectsInstancesByObjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetObjectsInstancesByObjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetObjectsInstancesByObjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetObjectsInstancesByObjectId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_CreateObjectInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).CreateObjectInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/CreateObjectInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).CreateObjectInstance(ctx, req.(*ObjectInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_GetStoragePartitionsByStorageLocationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).GetStoragePartitionsByStorageLocationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/GetStoragePartitionsByStorageLocationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).GetStoragePartitionsByStorageLocationId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_DeleteObjectInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).DeleteObjectInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/DeleteObjectInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).DeleteObjectInstance(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IngestHandlerService/AlterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestHandlerServiceServer).AlterStatus(ctx, req.(*StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestHandlerService_ServiceDesc is the grpc.ServiceDesc for IngestHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IngestHandlerService",
	HandlerType: (*IngestHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStorageLocationsByCollectionAlias",
			Handler:    _IngestHandlerService_GetStorageLocationsByCollectionAlias_Handler,
		},
		{
			MethodName: "GetCurrentStorageLocationsByCollectionAlias",
			Handler:    _IngestHandlerService_GetCurrentStorageLocationsByCollectionAlias_Handler,
		},
		{
			MethodName: "GetStoragePartitionForLocation",
			Handler:    _IngestHandlerService_GetStoragePartitionForLocation_Handler,
		},
		{
			MethodName: "SaveInstanceAndUpdatePartition",
			Handler:    _IngestHandlerService_SaveInstanceAndUpdatePartition_Handler,
		},
		{
			MethodName: "GetStorageLocationById",
			Handler:    _IngestHandlerService_GetStorageLocationById_Handler,
		},
		{
			MethodName: "GetAndSaveStoragePartitionWithRelevantAlias",
			Handler:    _IngestHandlerService_GetAndSaveStoragePartitionWithRelevantAlias_Handler,
		},
		{
			MethodName: "UpdateStoragePartition",
			Handler:    _IngestHandlerService_UpdateStoragePartition_Handler,
		},
		{
			MethodName: "GetObjectsByCollectionAlias",
			Handler:    _IngestHandlerService_GetObjectsByCollectionAlias_Handler,
		},
		{
			MethodName: "GetObjectsInstancesByObjectId",
			Handler:    _IngestHandlerService_GetObjectsInstancesByObjectId_Handler,
		},
		{
			MethodName: "CreateObjectInstance",
			Handler:    _IngestHandlerService_CreateObjectInstance_Handler,
		},
		{
			MethodName: "GetStoragePartitionsByStorageLocationId",
			Handler:    _IngestHandlerService_GetStoragePartitionsByStorageLocationId_Handler,
		},
		{
			MethodName: "DeleteObjectInstance",
			Handler:    _IngestHandlerService_DeleteObjectInstance_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _IngestHandlerService_AlterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}

// ClerkHandlerServiceClient is the client API for ClerkHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkHandlerServiceClient interface {
	FindTenantById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tenant, error)
	DeleteTenant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
	SaveTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Status, error)
	UpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Status, error)
	FindAllTenants(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*Tenants, error)
	GetStorageLocationsByTenantId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StorageLocations, error)
	SaveStorageLocation(ctx context.Context, in *StorageLocation, opts ...grpc.CallOption) (*Status, error)
	DeleteStorageLocationById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
	GetCollectionsByTenantId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Collections, error)
	GetCollectionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Collection, error)
	DeleteCollectionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
	CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Status, error)
	UpdateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Status, error)
	GetObjectById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Object, error)
	GetObjectInstanceById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ObjectInstance, error)
	GetFileById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*File, error)
	GetObjectInstanceCheckById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ObjectInstanceCheck, error)
	GetStorageLocationById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StorageLocation, error)
	GetStoragePartitionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StoragePartition, error)
	FindAllTenantsPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Tenants, error)
	GetCollectionsByTenantIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Collections, error)
	GetObjectsByCollectionIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Objects, error)
	GetFilesByCollectionIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Files, error)
	GetMimeTypesForCollectionId(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*MimeTypes, error)
	GetPronomsForCollectionId(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Pronoms, error)
	GetObjectInstancesByObjectIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*ObjectInstances, error)
	GetFilesByObjectIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Files, error)
	GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*ObjectInstanceChecks, error)
	GetStorageLocationsByTenantIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*StorageLocations, error)
	GetStoragePartitionsByLocationIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*StoragePartitions, error)
	GetObjectInstancesByStoragePartitionIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*ObjectInstances, error)
	CheckStatus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusObject, error)
	CreateStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Id, error)
	AlterStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Status, error)
}

type clerkHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkHandlerServiceClient(cc grpc.ClientConnInterface) ClerkHandlerServiceClient {
	return &clerkHandlerServiceClient{cc}
}

func (c *clerkHandlerServiceClient) FindTenantById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/FindTenantById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteTenant(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) SaveTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/SaveTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/UpdateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) FindAllTenants(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*Tenants, error) {
	out := new(Tenants)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/FindAllTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByTenantId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StorageLocations, error) {
	out := new(StorageLocations)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetStorageLocationsByTenantId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) SaveStorageLocation(ctx context.Context, in *StorageLocation, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/SaveStorageLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteStorageLocationById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/DeleteStorageLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionsByTenantId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Collections, error) {
	out := new(Collections)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetCollectionsByTenantId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetCollectionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) DeleteCollectionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/DeleteCollectionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) UpdateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ObjectInstance, error) {
	out := new(ObjectInstance)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectInstanceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFileById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetFileById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceCheckById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ObjectInstanceCheck, error) {
	out := new(ObjectInstanceCheck)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectInstanceCheckById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StorageLocation, error) {
	out := new(StorageLocation)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetStorageLocationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStoragePartitionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StoragePartition, error) {
	out := new(StoragePartition)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetStoragePartitionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) FindAllTenantsPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Tenants, error) {
	out := new(Tenants)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/FindAllTenantsPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetCollectionsByTenantIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Collections, error) {
	out := new(Collections)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetCollectionsByTenantIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectsByCollectionIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Objects, error) {
	out := new(Objects)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectsByCollectionIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFilesByCollectionIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Files, error) {
	out := new(Files)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetFilesByCollectionIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetMimeTypesForCollectionId(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*MimeTypes, error) {
	out := new(MimeTypes)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetMimeTypesForCollectionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetPronomsForCollectionId(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Pronoms, error) {
	out := new(Pronoms)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetPronomsForCollectionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByObjectIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*ObjectInstances, error) {
	out := new(ObjectInstances)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectInstancesByObjectIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetFilesByObjectIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Files, error) {
	out := new(Files)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetFilesByObjectIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*ObjectInstanceChecks, error) {
	out := new(ObjectInstanceChecks)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectInstanceChecksByObjectInstanceIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStorageLocationsByTenantIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*StorageLocations, error) {
	out := new(StorageLocations)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetStorageLocationsByTenantIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetStoragePartitionsByLocationIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*StoragePartitions, error) {
	out := new(StoragePartitions)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetStoragePartitionsByLocationIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) GetObjectInstancesByStoragePartitionIdPaginated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*ObjectInstances, error) {
	out := new(ObjectInstances)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/GetObjectInstancesByStoragePartitionIdPaginated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CheckStatus(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StatusObject, error) {
	out := new(StatusObject)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/CheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) CreateStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/CreateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkHandlerServiceClient) AlterStatus(ctx context.Context, in *StatusObject, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClerkHandlerService/AlterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkHandlerServiceServer is the server API for ClerkHandlerService service.
// All implementations must embed UnimplementedClerkHandlerServiceServer
// for forward compatibility
type ClerkHandlerServiceServer interface {
	FindTenantById(context.Context, *Id) (*Tenant, error)
	DeleteTenant(context.Context, *Id) (*Status, error)
	SaveTenant(context.Context, *Tenant) (*Status, error)
	UpdateTenant(context.Context, *Tenant) (*Status, error)
	FindAllTenants(context.Context, *NoParam) (*Tenants, error)
	GetStorageLocationsByTenantId(context.Context, *Id) (*StorageLocations, error)
	SaveStorageLocation(context.Context, *StorageLocation) (*Status, error)
	DeleteStorageLocationById(context.Context, *Id) (*Status, error)
	GetCollectionsByTenantId(context.Context, *Id) (*Collections, error)
	GetCollectionById(context.Context, *Id) (*Collection, error)
	DeleteCollectionById(context.Context, *Id) (*Status, error)
	CreateCollection(context.Context, *Collection) (*Status, error)
	UpdateCollection(context.Context, *Collection) (*Status, error)
	GetObjectById(context.Context, *Id) (*Object, error)
	GetObjectInstanceById(context.Context, *Id) (*ObjectInstance, error)
	GetFileById(context.Context, *Id) (*File, error)
	GetObjectInstanceCheckById(context.Context, *Id) (*ObjectInstanceCheck, error)
	GetStorageLocationById(context.Context, *Id) (*StorageLocation, error)
	GetStoragePartitionById(context.Context, *Id) (*StoragePartition, error)
	FindAllTenantsPaginated(context.Context, *Pagination) (*Tenants, error)
	GetCollectionsByTenantIdPaginated(context.Context, *Pagination) (*Collections, error)
	GetObjectsByCollectionIdPaginated(context.Context, *Pagination) (*Objects, error)
	GetFilesByCollectionIdPaginated(context.Context, *Pagination) (*Files, error)
	GetMimeTypesForCollectionId(context.Context, *Pagination) (*MimeTypes, error)
	GetPronomsForCollectionId(context.Context, *Pagination) (*Pronoms, error)
	GetObjectInstancesByObjectIdPaginated(context.Context, *Pagination) (*ObjectInstances, error)
	GetFilesByObjectIdPaginated(context.Context, *Pagination) (*Files, error)
	GetObjectInstanceChecksByObjectInstanceIdPaginated(context.Context, *Pagination) (*ObjectInstanceChecks, error)
	GetStorageLocationsByTenantIdPaginated(context.Context, *Pagination) (*StorageLocations, error)
	GetStoragePartitionsByLocationIdPaginated(context.Context, *Pagination) (*StoragePartitions, error)
	GetObjectInstancesByStoragePartitionIdPaginated(context.Context, *Pagination) (*ObjectInstances, error)
	CheckStatus(context.Context, *Id) (*StatusObject, error)
	CreateStatus(context.Context, *StatusObject) (*Id, error)
	AlterStatus(context.Context, *StatusObject) (*Status, error)
	mustEmbedUnimplementedClerkHandlerServiceServer()
}

// UnimplementedClerkHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkHandlerServiceServer struct {
}

func (UnimplementedClerkHandlerServiceServer) FindTenantById(context.Context, *Id) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteTenant(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) SaveTenant(context.Context, *Tenant) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateTenant(context.Context, *Tenant) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedClerkHandlerServiceServer) FindAllTenants(context.Context, *NoParam) (*Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTenants not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByTenantId(context.Context, *Id) (*StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) SaveStorageLocation(context.Context, *StorageLocation) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStorageLocation not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteStorageLocationById(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageLocationById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionsByTenantId(context.Context, *Id) (*Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByTenantId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionById(context.Context, *Id) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) DeleteCollectionById(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateCollection(context.Context, *Collection) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedClerkHandlerServiceServer) UpdateCollection(context.Context, *Collection) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectById(context.Context, *Id) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceById(context.Context, *Id) (*ObjectInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFileById(context.Context, *Id) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceCheckById(context.Context, *Id) (*ObjectInstanceCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceCheckById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationById(context.Context, *Id) (*StorageLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStoragePartitionById(context.Context, *Id) (*StoragePartition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionById not implemented")
}
func (UnimplementedClerkHandlerServiceServer) FindAllTenantsPaginated(context.Context, *Pagination) (*Tenants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTenantsPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetCollectionsByTenantIdPaginated(context.Context, *Pagination) (*Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByTenantIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectsByCollectionIdPaginated(context.Context, *Pagination) (*Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFilesByCollectionIdPaginated(context.Context, *Pagination) (*Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByCollectionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetMimeTypesForCollectionId(context.Context, *Pagination) (*MimeTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMimeTypesForCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetPronomsForCollectionId(context.Context, *Pagination) (*Pronoms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPronomsForCollectionId not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByObjectIdPaginated(context.Context, *Pagination) (*ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByObjectIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetFilesByObjectIdPaginated(context.Context, *Pagination) (*Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByObjectIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstanceChecksByObjectInstanceIdPaginated(context.Context, *Pagination) (*ObjectInstanceChecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstanceChecksByObjectInstanceIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStorageLocationsByTenantIdPaginated(context.Context, *Pagination) (*StorageLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageLocationsByTenantIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetStoragePartitionsByLocationIdPaginated(context.Context, *Pagination) (*StoragePartitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePartitionsByLocationIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) GetObjectInstancesByStoragePartitionIdPaginated(context.Context, *Pagination) (*ObjectInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInstancesByStoragePartitionIdPaginated not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CheckStatus(context.Context, *Id) (*StatusObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) CreateStatus(context.Context, *StatusObject) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) AlterStatus(context.Context, *StatusObject) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterStatus not implemented")
}
func (UnimplementedClerkHandlerServiceServer) mustEmbedUnimplementedClerkHandlerServiceServer() {}

// UnsafeClerkHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkHandlerServiceServer will
// result in compilation errors.
type UnsafeClerkHandlerServiceServer interface {
	mustEmbedUnimplementedClerkHandlerServiceServer()
}

func RegisterClerkHandlerServiceServer(s grpc.ServiceRegistrar, srv ClerkHandlerServiceServer) {
	s.RegisterService(&ClerkHandlerService_ServiceDesc, srv)
}

func _ClerkHandlerService_FindTenantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindTenantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/FindTenantById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindTenantById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteTenant(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_SaveTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).SaveTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/SaveTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).SaveTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/UpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_FindAllTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindAllTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/FindAllTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindAllTenants(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetStorageLocationsByTenantId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_SaveStorageLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).SaveStorageLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/SaveStorageLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).SaveStorageLocation(ctx, req.(*StorageLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/DeleteStorageLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteStorageLocationById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionsByTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetCollectionsByTenantId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetCollectionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_DeleteCollectionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).DeleteCollectionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/DeleteCollectionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).DeleteCollectionById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).UpdateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectInstanceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetFileById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFileById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceCheckById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceCheckById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectInstanceCheckById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceCheckById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetStorageLocationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStoragePartitionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetStoragePartitionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_FindAllTenantsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).FindAllTenantsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/FindAllTenantsPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).FindAllTenantsPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetCollectionsByTenantIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetCollectionsByTenantIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetCollectionsByTenantIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectsByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectsByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectsByCollectionIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectsByCollectionIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFilesByCollectionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFilesByCollectionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetFilesByCollectionIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFilesByCollectionIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetMimeTypesForCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetMimeTypesForCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetMimeTypesForCollectionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetMimeTypesForCollectionId(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetPronomsForCollectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetPronomsForCollectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetPronomsForCollectionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetPronomsForCollectionId(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByObjectIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectInstancesByObjectIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByObjectIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetFilesByObjectIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetFilesByObjectIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetFilesByObjectIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetFilesByObjectIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectInstanceChecksByObjectInstanceIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstanceChecksByObjectInstanceIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetStorageLocationsByTenantIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStorageLocationsByTenantIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionsByLocationIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetStoragePartitionsByLocationIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetStoragePartitionsByLocationIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByStoragePartitionIdPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/GetObjectInstancesByStoragePartitionIdPaginated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).GetObjectInstancesByStoragePartitionIdPaginated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CheckStatus(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/CreateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).CreateStatus(ctx, req.(*StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkHandlerService_AlterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkHandlerServiceServer).AlterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClerkHandlerService/AlterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkHandlerServiceServer).AlterStatus(ctx, req.(*StatusObject))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkHandlerService_ServiceDesc is the grpc.ServiceDesc for ClerkHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClerkHandlerService",
	HandlerType: (*ClerkHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTenantById",
			Handler:    _ClerkHandlerService_FindTenantById_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _ClerkHandlerService_DeleteTenant_Handler,
		},
		{
			MethodName: "SaveTenant",
			Handler:    _ClerkHandlerService_SaveTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _ClerkHandlerService_UpdateTenant_Handler,
		},
		{
			MethodName: "FindAllTenants",
			Handler:    _ClerkHandlerService_FindAllTenants_Handler,
		},
		{
			MethodName: "GetStorageLocationsByTenantId",
			Handler:    _ClerkHandlerService_GetStorageLocationsByTenantId_Handler,
		},
		{
			MethodName: "SaveStorageLocation",
			Handler:    _ClerkHandlerService_SaveStorageLocation_Handler,
		},
		{
			MethodName: "DeleteStorageLocationById",
			Handler:    _ClerkHandlerService_DeleteStorageLocationById_Handler,
		},
		{
			MethodName: "GetCollectionsByTenantId",
			Handler:    _ClerkHandlerService_GetCollectionsByTenantId_Handler,
		},
		{
			MethodName: "GetCollectionById",
			Handler:    _ClerkHandlerService_GetCollectionById_Handler,
		},
		{
			MethodName: "DeleteCollectionById",
			Handler:    _ClerkHandlerService_DeleteCollectionById_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _ClerkHandlerService_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _ClerkHandlerService_UpdateCollection_Handler,
		},
		{
			MethodName: "GetObjectById",
			Handler:    _ClerkHandlerService_GetObjectById_Handler,
		},
		{
			MethodName: "GetObjectInstanceById",
			Handler:    _ClerkHandlerService_GetObjectInstanceById_Handler,
		},
		{
			MethodName: "GetFileById",
			Handler:    _ClerkHandlerService_GetFileById_Handler,
		},
		{
			MethodName: "GetObjectInstanceCheckById",
			Handler:    _ClerkHandlerService_GetObjectInstanceCheckById_Handler,
		},
		{
			MethodName: "GetStorageLocationById",
			Handler:    _ClerkHandlerService_GetStorageLocationById_Handler,
		},
		{
			MethodName: "GetStoragePartitionById",
			Handler:    _ClerkHandlerService_GetStoragePartitionById_Handler,
		},
		{
			MethodName: "FindAllTenantsPaginated",
			Handler:    _ClerkHandlerService_FindAllTenantsPaginated_Handler,
		},
		{
			MethodName: "GetCollectionsByTenantIdPaginated",
			Handler:    _ClerkHandlerService_GetCollectionsByTenantIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectsByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectsByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetFilesByCollectionIdPaginated",
			Handler:    _ClerkHandlerService_GetFilesByCollectionIdPaginated_Handler,
		},
		{
			MethodName: "GetMimeTypesForCollectionId",
			Handler:    _ClerkHandlerService_GetMimeTypesForCollectionId_Handler,
		},
		{
			MethodName: "GetPronomsForCollectionId",
			Handler:    _ClerkHandlerService_GetPronomsForCollectionId_Handler,
		},
		{
			MethodName: "GetObjectInstancesByObjectIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstancesByObjectIdPaginated_Handler,
		},
		{
			MethodName: "GetFilesByObjectIdPaginated",
			Handler:    _ClerkHandlerService_GetFilesByObjectIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstanceChecksByObjectInstanceIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstanceChecksByObjectInstanceIdPaginated_Handler,
		},
		{
			MethodName: "GetStorageLocationsByTenantIdPaginated",
			Handler:    _ClerkHandlerService_GetStorageLocationsByTenantIdPaginated_Handler,
		},
		{
			MethodName: "GetStoragePartitionsByLocationIdPaginated",
			Handler:    _ClerkHandlerService_GetStoragePartitionsByLocationIdPaginated_Handler,
		},
		{
			MethodName: "GetObjectInstancesByStoragePartitionIdPaginated",
			Handler:    _ClerkHandlerService_GetObjectInstancesByStoragePartitionIdPaginated_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _ClerkHandlerService_CheckStatus_Handler,
		},
		{
			MethodName: "CreateStatus",
			Handler:    _ClerkHandlerService_CreateStatus_Handler,
		},
		{
			MethodName: "AlterStatus",
			Handler:    _ClerkHandlerService_AlterStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}

// DispatcherHandlerServiceClient is the client API for DispatcherHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherHandlerServiceClient interface {
	GetLowQualityCollections(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*CollectionAliases, error)
}

type dispatcherHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherHandlerServiceClient(cc grpc.ClientConnInterface) DispatcherHandlerServiceClient {
	return &dispatcherHandlerServiceClient{cc}
}

func (c *dispatcherHandlerServiceClient) GetLowQualityCollections(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*CollectionAliases, error) {
	out := new(CollectionAliases)
	err := c.cc.Invoke(ctx, "/DispatcherHandlerService/GetLowQualityCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherHandlerServiceServer is the server API for DispatcherHandlerService service.
// All implementations must embed UnimplementedDispatcherHandlerServiceServer
// for forward compatibility
type DispatcherHandlerServiceServer interface {
	GetLowQualityCollections(context.Context, *NoParam) (*CollectionAliases, error)
	mustEmbedUnimplementedDispatcherHandlerServiceServer()
}

// UnimplementedDispatcherHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherHandlerServiceServer struct {
}

func (UnimplementedDispatcherHandlerServiceServer) GetLowQualityCollections(context.Context, *NoParam) (*CollectionAliases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowQualityCollections not implemented")
}
func (UnimplementedDispatcherHandlerServiceServer) mustEmbedUnimplementedDispatcherHandlerServiceServer() {
}

// UnsafeDispatcherHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherHandlerServiceServer will
// result in compilation errors.
type UnsafeDispatcherHandlerServiceServer interface {
	mustEmbedUnimplementedDispatcherHandlerServiceServer()
}

func RegisterDispatcherHandlerServiceServer(s grpc.ServiceRegistrar, srv DispatcherHandlerServiceServer) {
	s.RegisterService(&DispatcherHandlerService_ServiceDesc, srv)
}

func _DispatcherHandlerService_GetLowQualityCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherHandlerServiceServer).GetLowQualityCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DispatcherHandlerService/GetLowQualityCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherHandlerServiceServer).GetLowQualityCollections(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherHandlerService_ServiceDesc is the grpc.ServiceDesc for DispatcherHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DispatcherHandlerService",
	HandlerType: (*DispatcherHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLowQualityCollections",
			Handler:    _DispatcherHandlerService_GetLowQualityCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}

// DispatcherIngestServiceClient is the client API for DispatcherIngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherIngestServiceClient interface {
	ChangeQualityForCollections(ctx context.Context, in *CollectionAliases, opts ...grpc.CallOption) (*Status, error)
}

type dispatcherIngestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherIngestServiceClient(cc grpc.ClientConnInterface) DispatcherIngestServiceClient {
	return &dispatcherIngestServiceClient{cc}
}

func (c *dispatcherIngestServiceClient) ChangeQualityForCollections(ctx context.Context, in *CollectionAliases, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/DispatcherIngestService/ChangeQualityForCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherIngestServiceServer is the server API for DispatcherIngestService service.
// All implementations must embed UnimplementedDispatcherIngestServiceServer
// for forward compatibility
type DispatcherIngestServiceServer interface {
	ChangeQualityForCollections(context.Context, *CollectionAliases) (*Status, error)
	mustEmbedUnimplementedDispatcherIngestServiceServer()
}

// UnimplementedDispatcherIngestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherIngestServiceServer struct {
}

func (UnimplementedDispatcherIngestServiceServer) ChangeQualityForCollections(context.Context, *CollectionAliases) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeQualityForCollections not implemented")
}
func (UnimplementedDispatcherIngestServiceServer) mustEmbedUnimplementedDispatcherIngestServiceServer() {
}

// UnsafeDispatcherIngestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherIngestServiceServer will
// result in compilation errors.
type UnsafeDispatcherIngestServiceServer interface {
	mustEmbedUnimplementedDispatcherIngestServiceServer()
}

func RegisterDispatcherIngestServiceServer(s grpc.ServiceRegistrar, srv DispatcherIngestServiceServer) {
	s.RegisterService(&DispatcherIngestService_ServiceDesc, srv)
}

func _DispatcherIngestService_ChangeQualityForCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionAliases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherIngestServiceServer).ChangeQualityForCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DispatcherIngestService/ChangeQualityForCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherIngestServiceServer).ChangeQualityForCollections(ctx, req.(*CollectionAliases))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherIngestService_ServiceDesc is the grpc.ServiceDesc for DispatcherIngestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherIngestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DispatcherIngestService",
	HandlerType: (*DispatcherIngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeQualityForCollections",
			Handler:    _DispatcherIngestService_ChangeQualityForCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/copy.proto",
}
