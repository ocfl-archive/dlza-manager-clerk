// protoc --go_out=. --go-grpc_out=. proto/copy.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.4
// source: proto/copy.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoParam) Reset() {
	*x = NoParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoParam) ProtoMessage() {}

func (x *NoParam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoParam.ProtoReflect.Descriptor instead.
func (*NoParam) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{0}
}

type StatusObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Status      string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	LastChanged string `protobuf:"bytes,3,opt,name=LastChanged,proto3" json:"LastChanged,omitempty"`
}

func (x *StatusObject) Reset() {
	*x = StatusObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusObject) ProtoMessage() {}

func (x *StatusObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusObject.ProtoReflect.Descriptor instead.
func (*StatusObject) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{1}
}

func (x *StatusObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusObject) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusObject) GetLastChanged() string {
	if x != nil {
		return x.LastChanged
	}
	return ""
}

type UploaderAccessObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=Collection,proto3" json:"Collection,omitempty"`
}

func (x *UploaderAccessObject) Reset() {
	*x = UploaderAccessObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploaderAccessObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploaderAccessObject) ProtoMessage() {}

func (x *UploaderAccessObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploaderAccessObject.ProtoReflect.Descriptor instead.
func (*UploaderAccessObject) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{2}
}

func (x *UploaderAccessObject) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UploaderAccessObject) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SecondId       string   `protobuf:"bytes,2,opt,name=SecondId,proto3" json:"SecondId,omitempty"`
	Skip           int32    `protobuf:"varint,3,opt,name=Skip,proto3" json:"Skip,omitempty"`
	Take           int32    `protobuf:"varint,4,opt,name=Take,proto3" json:"Take,omitempty"`
	SortDirection  string   `protobuf:"bytes,5,opt,name=SortDirection,proto3" json:"SortDirection,omitempty"`
	SortKey        string   `protobuf:"bytes,6,opt,name=SortKey,proto3" json:"SortKey,omitempty"`
	AllowedTenants []string `protobuf:"bytes,7,rep,name=AllowedTenants,proto3" json:"AllowedTenants,omitempty"`
	SearchField    string   `protobuf:"bytes,8,opt,name=searchField,proto3" json:"searchField,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{3}
}

func (x *Pagination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pagination) GetSecondId() string {
	if x != nil {
		return x.SecondId
	}
	return ""
}

func (x *Pagination) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *Pagination) GetTake() int32 {
	if x != nil {
		return x.Take
	}
	return 0
}

func (x *Pagination) GetSortDirection() string {
	if x != nil {
		return x.SortDirection
	}
	return ""
}

func (x *Pagination) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *Pagination) GetAllowedTenants() []string {
	if x != nil {
		return x.AllowedTenants
	}
	return nil
}

func (x *Pagination) GetSearchField() string {
	if x != nil {
		return x.SearchField
	}
	return ""
}

type IncomingOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionAlias string  `protobuf:"bytes,1,opt,name=CollectionAlias,proto3" json:"CollectionAlias,omitempty"`
	StatusId        string  `protobuf:"bytes,2,opt,name=StatusId,proto3" json:"StatusId,omitempty"`
	FilePath        string  `protobuf:"bytes,3,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	InfoFilePath    string  `protobuf:"bytes,4,opt,name=InfoFilePath,proto3" json:"InfoFilePath,omitempty"`
	Object          *Object `protobuf:"bytes,5,opt,name=Object,proto3" json:"Object,omitempty"`
}

func (x *IncomingOrder) Reset() {
	*x = IncomingOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingOrder) ProtoMessage() {}

func (x *IncomingOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingOrder.ProtoReflect.Descriptor instead.
func (*IncomingOrder) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{4}
}

func (x *IncomingOrder) GetCollectionAlias() string {
	if x != nil {
		return x.CollectionAlias
	}
	return ""
}

func (x *IncomingOrder) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *IncomingOrder) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *IncomingOrder) GetInfoFilePath() string {
	if x != nil {
		return x.InfoFilePath
	}
	return ""
}

func (x *IncomingOrder) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias            string `protobuf:"bytes,1,opt,name=Alias,proto3" json:"Alias,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Owner            string `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	OwnerMail        string `protobuf:"bytes,4,opt,name=OwnerMail,proto3" json:"OwnerMail,omitempty"`
	Name             string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Quality          int32  `protobuf:"varint,6,opt,name=Quality,proto3" json:"Quality,omitempty"`
	TenantId         string `protobuf:"bytes,7,opt,name=TenantId,proto3" json:"TenantId,omitempty"`
	Id               string `protobuf:"bytes,8,opt,name=Id,proto3" json:"Id,omitempty"`
	TotalFileSize    int64  `protobuf:"varint,9,opt,name=TotalFileSize,proto3" json:"TotalFileSize,omitempty"`
	TotalFileCount   int32  `protobuf:"varint,10,opt,name=TotalFileCount,proto3" json:"TotalFileCount,omitempty"`
	TotalObjectCount int32  `protobuf:"varint,11,opt,name=TotalObjectCount,proto3" json:"TotalObjectCount,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{5}
}

func (x *Collection) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Collection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collection) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Collection) GetOwnerMail() string {
	if x != nil {
		return x.OwnerMail
	}
	return ""
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collection) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Collection) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetTotalFileSize() int64 {
	if x != nil {
		return x.TotalFileSize
	}
	return 0
}

func (x *Collection) GetTotalFileCount() int32 {
	if x != nil {
		return x.TotalFileCount
	}
	return 0
}

func (x *Collection) GetTotalObjectCount() int32 {
	if x != nil {
		return x.TotalObjectCount
	}
	return 0
}

type Collections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	TotalItems  int32         `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *Collections) Reset() {
	*x = Collections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collections) ProtoMessage() {}

func (x *Collections) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collections.ProtoReflect.Descriptor instead.
func (*Collections) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{6}
}

func (x *Collections) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *Collections) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type CollectionAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionAlias string `protobuf:"bytes,1,opt,name=CollectionAlias,proto3" json:"CollectionAlias,omitempty"`
}

func (x *CollectionAlias) Reset() {
	*x = CollectionAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionAlias) ProtoMessage() {}

func (x *CollectionAlias) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionAlias.ProtoReflect.Descriptor instead.
func (*CollectionAlias) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{7}
}

func (x *CollectionAlias) GetCollectionAlias() string {
	if x != nil {
		return x.CollectionAlias
	}
	return ""
}

type CollectionAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionAliases []*CollectionAlias `protobuf:"bytes,1,rep,name=CollectionAliases,proto3" json:"CollectionAliases,omitempty"`
}

func (x *CollectionAliases) Reset() {
	*x = CollectionAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionAliases) ProtoMessage() {}

func (x *CollectionAliases) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionAliases.ProtoReflect.Descriptor instead.
func (*CollectionAliases) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{8}
}

func (x *CollectionAliases) GetCollectionAliases() []*CollectionAlias {
	if x != nil {
		return x.CollectionAliases
	}
	return nil
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{9}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*Id `protobuf:"bytes,1,rep,name=Ids,proto3" json:"Ids,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{10}
}

func (x *Ids) GetIds() []*Id {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Alias    string `protobuf:"bytes,3,opt,name=Alias,proto3" json:"Alias,omitempty"`
	Person   string `protobuf:"bytes,4,opt,name=Person,proto3" json:"Person,omitempty"`
	Email    string `protobuf:"bytes,5,opt,name=Email,proto3" json:"Email,omitempty"`
	ApiKeyId string `protobuf:"bytes,6,opt,name=ApiKeyId,proto3" json:"ApiKeyId,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{11}
}

func (x *Tenant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tenant) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Tenant) GetPerson() string {
	if x != nil {
		return x.Person
	}
	return ""
}

func (x *Tenant) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Tenant) GetApiKeyId() string {
	if x != nil {
		return x.ApiKeyId
	}
	return ""
}

type Tenants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants    []*Tenant `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	TotalItems int32     `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *Tenants) Reset() {
	*x = Tenants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenants) ProtoMessage() {}

func (x *Tenants) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenants.ProtoReflect.Descriptor instead.
func (*Tenants) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{12}
}

func (x *Tenants) GetTenants() []*Tenant {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *Tenants) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{13}
}

func (x *Status) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature         string   `protobuf:"bytes,1,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Sets              []string `protobuf:"bytes,2,rep,name=Sets,proto3" json:"Sets,omitempty"`
	Identifiers       []string `protobuf:"bytes,3,rep,name=Identifiers,proto3" json:"Identifiers,omitempty"`
	Title             string   `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	AlternativeTitles []string `protobuf:"bytes,5,rep,name=AlternativeTitles,proto3" json:"AlternativeTitles,omitempty"`
	Description       string   `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Keywords          []string `protobuf:"bytes,7,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	References        []string `protobuf:"bytes,8,rep,name=References,proto3" json:"References,omitempty"`
	IngestWorkflow    string   `protobuf:"bytes,9,opt,name=IngestWorkflow,proto3" json:"IngestWorkflow,omitempty"`
	User              string   `protobuf:"bytes,10,opt,name=User,proto3" json:"User,omitempty"`
	Address           string   `protobuf:"bytes,11,opt,name=Address,proto3" json:"Address,omitempty"`
	Created           string   `protobuf:"bytes,12,opt,name=Created,proto3" json:"Created,omitempty"`
	LastChanged       string   `protobuf:"bytes,13,opt,name=LastChanged,proto3" json:"LastChanged,omitempty"`
	Size              int64    `protobuf:"varint,14,opt,name=Size,proto3" json:"Size,omitempty"`
	CollectionId      string   `protobuf:"bytes,15,opt,name=CollectionId,proto3" json:"CollectionId,omitempty"`
	Checksum          string   `protobuf:"bytes,16,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Id                string   `protobuf:"bytes,17,opt,name=Id,proto3" json:"Id,omitempty"`
	TotalFileSize     int64    `protobuf:"varint,18,opt,name=TotalFileSize,proto3" json:"TotalFileSize,omitempty"`
	TotalFileCount    int32    `protobuf:"varint,19,opt,name=TotalFileCount,proto3" json:"TotalFileCount,omitempty"`
	Collection        string   `protobuf:"bytes,20,opt,name=Collection,proto3" json:"Collection,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{14}
}

func (x *Object) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Object) GetSets() []string {
	if x != nil {
		return x.Sets
	}
	return nil
}

func (x *Object) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Object) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Object) GetAlternativeTitles() []string {
	if x != nil {
		return x.AlternativeTitles
	}
	return nil
}

func (x *Object) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Object) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Object) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Object) GetIngestWorkflow() string {
	if x != nil {
		return x.IngestWorkflow
	}
	return ""
}

func (x *Object) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Object) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Object) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Object) GetLastChanged() string {
	if x != nil {
		return x.LastChanged
	}
	return ""
}

func (x *Object) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Object) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Object) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Object) GetTotalFileSize() int64 {
	if x != nil {
		return x.TotalFileSize
	}
	return 0
}

func (x *Object) GetTotalFileCount() int32 {
	if x != nil {
		return x.TotalFileCount
	}
	return 0
}

func (x *Object) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type Objects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects    []*Object `protobuf:"bytes,1,rep,name=Objects,proto3" json:"Objects,omitempty"`
	TotalItems int32     `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *Objects) Reset() {
	*x = Objects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Objects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objects) ProtoMessage() {}

func (x *Objects) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objects.ProtoReflect.Descriptor instead.
func (*Objects) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{15}
}

func (x *Objects) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *Objects) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type ObjectInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path               string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Size               int64  `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Created            string `protobuf:"bytes,3,opt,name=Created,proto3" json:"Created,omitempty"`
	Status             string `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	StoragePartitionId string `protobuf:"bytes,5,opt,name=StoragePartitionId,proto3" json:"StoragePartitionId,omitempty"`
	ObjectId           string `protobuf:"bytes,6,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`
	Id                 string `protobuf:"bytes,7,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ObjectInstance) Reset() {
	*x = ObjectInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInstance) ProtoMessage() {}

func (x *ObjectInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInstance.ProtoReflect.Descriptor instead.
func (*ObjectInstance) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{16}
}

func (x *ObjectInstance) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ObjectInstance) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ObjectInstance) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *ObjectInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ObjectInstance) GetStoragePartitionId() string {
	if x != nil {
		return x.StoragePartitionId
	}
	return ""
}

func (x *ObjectInstance) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ObjectInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ObjectInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectInstances []*ObjectInstance `protobuf:"bytes,1,rep,name=ObjectInstances,proto3" json:"ObjectInstances,omitempty"`
	TotalItems      int32             `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *ObjectInstances) Reset() {
	*x = ObjectInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInstances) ProtoMessage() {}

func (x *ObjectInstances) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInstances.ProtoReflect.Descriptor instead.
func (*ObjectInstances) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{17}
}

func (x *ObjectInstances) GetObjectInstances() []*ObjectInstance {
	if x != nil {
		return x.ObjectInstances
	}
	return nil
}

func (x *ObjectInstances) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type ObjectAndFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionAlias string  `protobuf:"bytes,1,opt,name=CollectionAlias,proto3" json:"CollectionAlias,omitempty"`
	Object          *Object `protobuf:"bytes,2,opt,name=Object,proto3" json:"Object,omitempty"`
	Files           []*File `protobuf:"bytes,3,rep,name=Files,proto3" json:"Files,omitempty"`
}

func (x *ObjectAndFiles) Reset() {
	*x = ObjectAndFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAndFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAndFiles) ProtoMessage() {}

func (x *ObjectAndFiles) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAndFiles.ProtoReflect.Descriptor instead.
func (*ObjectAndFiles) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{18}
}

func (x *ObjectAndFiles) GetCollectionAlias() string {
	if x != nil {
		return x.CollectionAlias
	}
	return ""
}

func (x *ObjectAndFiles) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ObjectAndFiles) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type InstanceAndPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectInstance   *ObjectInstance   `protobuf:"bytes,1,opt,name=ObjectInstance,proto3" json:"ObjectInstance,omitempty"`
	StoragePartition *StoragePartition `protobuf:"bytes,2,opt,name=storagePartition,proto3" json:"storagePartition,omitempty"`
}

func (x *InstanceAndPartition) Reset() {
	*x = InstanceAndPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAndPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAndPartition) ProtoMessage() {}

func (x *InstanceAndPartition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAndPartition.ProtoReflect.Descriptor instead.
func (*InstanceAndPartition) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceAndPartition) GetObjectInstance() *ObjectInstance {
	if x != nil {
		return x.ObjectInstance
	}
	return nil
}

func (x *InstanceAndPartition) GetStoragePartition() *StoragePartition {
	if x != nil {
		return x.StoragePartition
	}
	return nil
}

type StorageLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageLocations []*StorageLocation `protobuf:"bytes,1,rep,name=storageLocations,proto3" json:"storageLocations,omitempty"`
	TotalItems       int32              `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *StorageLocations) Reset() {
	*x = StorageLocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLocations) ProtoMessage() {}

func (x *StorageLocations) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLocations.ProtoReflect.Descriptor instead.
func (*StorageLocations) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{20}
}

func (x *StorageLocations) GetStorageLocations() []*StorageLocation {
	if x != nil {
		return x.StorageLocations
	}
	return nil
}

func (x *StorageLocations) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type StorageLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias               string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Type                string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Vault               string `protobuf:"bytes,3,opt,name=vault,proto3" json:"vault,omitempty"`
	Connection          string `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
	Quality             int32  `protobuf:"varint,5,opt,name=quality,proto3" json:"quality,omitempty"`
	Price               int32  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	SecurityCompliency  string `protobuf:"bytes,7,opt,name=security_compliency,json=securityCompliency,proto3" json:"security_compliency,omitempty"`
	FillFirst           bool   `protobuf:"varint,8,opt,name=fill_first,json=fillFirst,proto3" json:"fill_first,omitempty"`
	OcflType            string `protobuf:"bytes,9,opt,name=ocfl_type,json=ocflType,proto3" json:"ocfl_type,omitempty"`
	TenantId            string `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Id                  string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	NumberOfThreads     int32  `protobuf:"varint,12,opt,name=number_of_threads,json=numberOfThreads,proto3" json:"number_of_threads,omitempty"`
	TotalExistingVolume int64  `protobuf:"varint,13,opt,name=totalExistingVolume,proto3" json:"totalExistingVolume,omitempty"`
	TotalFilesSize      int64  `protobuf:"varint,14,opt,name=totalFilesSize,proto3" json:"totalFilesSize,omitempty"`
}

func (x *StorageLocation) Reset() {
	*x = StorageLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLocation) ProtoMessage() {}

func (x *StorageLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLocation.ProtoReflect.Descriptor instead.
func (*StorageLocation) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{21}
}

func (x *StorageLocation) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *StorageLocation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StorageLocation) GetVault() string {
	if x != nil {
		return x.Vault
	}
	return ""
}

func (x *StorageLocation) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *StorageLocation) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *StorageLocation) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StorageLocation) GetSecurityCompliency() string {
	if x != nil {
		return x.SecurityCompliency
	}
	return ""
}

func (x *StorageLocation) GetFillFirst() bool {
	if x != nil {
		return x.FillFirst
	}
	return false
}

func (x *StorageLocation) GetOcflType() string {
	if x != nil {
		return x.OcflType
	}
	return ""
}

func (x *StorageLocation) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *StorageLocation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageLocation) GetNumberOfThreads() int32 {
	if x != nil {
		return x.NumberOfThreads
	}
	return 0
}

func (x *StorageLocation) GetTotalExistingVolume() int64 {
	if x != nil {
		return x.TotalExistingVolume
	}
	return 0
}

func (x *StorageLocation) GetTotalFilesSize() int64 {
	if x != nil {
		return x.TotalFilesSize
	}
	return 0
}

type StoragePartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias             string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MaxSize           int64  `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	MaxObjects        int64  `protobuf:"varint,4,opt,name=max_objects,json=maxObjects,proto3" json:"max_objects,omitempty"`
	CurrentSize       int64  `protobuf:"varint,5,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
	CurrentObjects    int64  `protobuf:"varint,6,opt,name=current_objects,json=currentObjects,proto3" json:"current_objects,omitempty"`
	Id                string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	StorageLocationId string `protobuf:"bytes,8,opt,name=storage_location_id,json=storageLocationId,proto3" json:"storage_location_id,omitempty"`
}

func (x *StoragePartition) Reset() {
	*x = StoragePartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePartition) ProtoMessage() {}

func (x *StoragePartition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePartition.ProtoReflect.Descriptor instead.
func (*StoragePartition) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{22}
}

func (x *StoragePartition) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *StoragePartition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoragePartition) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *StoragePartition) GetMaxObjects() int64 {
	if x != nil {
		return x.MaxObjects
	}
	return 0
}

func (x *StoragePartition) GetCurrentSize() int64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *StoragePartition) GetCurrentObjects() int64 {
	if x != nil {
		return x.CurrentObjects
	}
	return 0
}

func (x *StoragePartition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StoragePartition) GetStorageLocationId() string {
	if x != nil {
		return x.StorageLocationId
	}
	return ""
}

type StoragePartitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoragePartitions []*StoragePartition `protobuf:"bytes,1,rep,name=StoragePartitions,proto3" json:"StoragePartitions,omitempty"`
	TotalItems        int32               `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *StoragePartitions) Reset() {
	*x = StoragePartitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePartitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePartitions) ProtoMessage() {}

func (x *StoragePartitions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePartitions.ProtoReflect.Descriptor instead.
func (*StoragePartitions) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{23}
}

func (x *StoragePartitions) GetStoragePartitions() []*StoragePartition {
	if x != nil {
		return x.StoragePartitions
	}
	return nil
}

func (x *StoragePartitions) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type SizeAndId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SizeAndId) Reset() {
	*x = SizeAndId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SizeAndId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SizeAndId) ProtoMessage() {}

func (x *SizeAndId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SizeAndId.ProtoReflect.Descriptor instead.
func (*SizeAndId) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{24}
}

func (x *SizeAndId) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SizeAndId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum string   `protobuf:"bytes,1,opt,name=Checksum,proto3" json:"Checksum,omitempty"`
	Name     []string `protobuf:"bytes,2,rep,name=Name,proto3" json:"Name,omitempty"`
	Size     int64    `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	MimeType string   `protobuf:"bytes,4,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	Pronom   string   `protobuf:"bytes,5,opt,name=Pronom,proto3" json:"Pronom,omitempty"`
	Width    int64    `protobuf:"varint,6,opt,name=Width,proto3" json:"Width,omitempty"`
	Height   int64    `protobuf:"varint,7,opt,name=Height,proto3" json:"Height,omitempty"`
	Duration int64    `protobuf:"varint,8,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Id       string   `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	ObjectId string   `protobuf:"bytes,10,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{25}
}

func (x *File) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *File) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *File) GetPronom() string {
	if x != nil {
		return x.Pronom
	}
	return ""
}

func (x *File) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *File) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *File) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type Files struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*File `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
	TotalItems int32   `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *Files) Reset() {
	*x = Files{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Files) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Files) ProtoMessage() {}

func (x *Files) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Files.ProtoReflect.Descriptor instead.
func (*Files) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{26}
}

func (x *Files) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Files) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type ObjectInstanceCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckTime        string `protobuf:"bytes,1,opt,name=CheckTime,proto3" json:"CheckTime,omitempty"`
	Error            bool   `protobuf:"varint,2,opt,name=Error,proto3" json:"Error,omitempty"`
	Message          string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	Id               string `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	ObjectInstanceId string `protobuf:"bytes,5,opt,name=ObjectInstanceId,proto3" json:"ObjectInstanceId,omitempty"`
}

func (x *ObjectInstanceCheck) Reset() {
	*x = ObjectInstanceCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInstanceCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInstanceCheck) ProtoMessage() {}

func (x *ObjectInstanceCheck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInstanceCheck.ProtoReflect.Descriptor instead.
func (*ObjectInstanceCheck) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{27}
}

func (x *ObjectInstanceCheck) GetCheckTime() string {
	if x != nil {
		return x.CheckTime
	}
	return ""
}

func (x *ObjectInstanceCheck) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ObjectInstanceCheck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ObjectInstanceCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectInstanceCheck) GetObjectInstanceId() string {
	if x != nil {
		return x.ObjectInstanceId
	}
	return ""
}

type ObjectInstanceChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectInstanceChecks []*ObjectInstanceCheck `protobuf:"bytes,1,rep,name=ObjectInstanceChecks,proto3" json:"ObjectInstanceChecks,omitempty"`
	TotalItems           int32                  `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *ObjectInstanceChecks) Reset() {
	*x = ObjectInstanceChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInstanceChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInstanceChecks) ProtoMessage() {}

func (x *ObjectInstanceChecks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInstanceChecks.ProtoReflect.Descriptor instead.
func (*ObjectInstanceChecks) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{28}
}

func (x *ObjectInstanceChecks) GetObjectInstanceChecks() []*ObjectInstanceCheck {
	if x != nil {
		return x.ObjectInstanceChecks
	}
	return nil
}

func (x *ObjectInstanceChecks) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type MimeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FileCount int32  `protobuf:"varint,2,opt,name=FileCount,proto3" json:"FileCount,omitempty"`
}

func (x *MimeType) Reset() {
	*x = MimeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MimeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MimeType) ProtoMessage() {}

func (x *MimeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MimeType.ProtoReflect.Descriptor instead.
func (*MimeType) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{29}
}

func (x *MimeType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MimeType) GetFileCount() int32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

type MimeTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MimeTypes  []*MimeType `protobuf:"bytes,1,rep,name=MimeTypes,proto3" json:"MimeTypes,omitempty"`
	TotalItems int32       `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *MimeTypes) Reset() {
	*x = MimeTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MimeTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MimeTypes) ProtoMessage() {}

func (x *MimeTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MimeTypes.ProtoReflect.Descriptor instead.
func (*MimeTypes) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{30}
}

func (x *MimeTypes) GetMimeTypes() []*MimeType {
	if x != nil {
		return x.MimeTypes
	}
	return nil
}

func (x *MimeTypes) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type Pronom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FileCount int32  `protobuf:"varint,2,opt,name=FileCount,proto3" json:"FileCount,omitempty"`
}

func (x *Pronom) Reset() {
	*x = Pronom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pronom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pronom) ProtoMessage() {}

func (x *Pronom) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pronom.ProtoReflect.Descriptor instead.
func (*Pronom) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{31}
}

func (x *Pronom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pronom) GetFileCount() int32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

type Pronoms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pronoms    []*Pronom `protobuf:"bytes,1,rep,name=Pronoms,proto3" json:"Pronoms,omitempty"`
	TotalItems int32     `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *Pronoms) Reset() {
	*x = Pronoms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_copy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pronoms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pronoms) ProtoMessage() {}

func (x *Pronoms) ProtoReflect() protoreflect.Message {
	mi := &file_proto_copy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pronoms.ProtoReflect.Descriptor instead.
func (*Pronoms) Descriptor() ([]byte, []int) {
	return file_proto_copy_proto_rawDescGZIP(), []int{32}
}

func (x *Pronoms) GetPronoms() []*Pronom {
	if x != nil {
		return x.Pronoms
	}
	return nil
}

func (x *Pronoms) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

var File_proto_copy_proto protoreflect.FileDescriptor

var file_proto_copy_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x58, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6b, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x61, 0x6b, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6f,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xb6,
	0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x03,
	0x49, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x03, 0x2e, 0x49, 0x64, 0x52, 0x03, 0x49, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x07, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x18, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x22, 0xe2, 0x04, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x53, 0x65, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x6c, 0x0a,
	0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc1, 0x03, 0x0a, 0x0f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x63, 0x66, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x63, 0x66, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x84, 0x02, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x53, 0x69, 0x7a,
	0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x08,
	0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x09, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x09, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x36, 0x0a, 0x06,
	0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x73, 0x12,
	0x21, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x6e, 0x6f,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x32, 0x3e, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x32, 0xa2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x0f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x15, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x2a, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x03, 0x2e, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x07, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x32, 0x4c, 0x0a, 0x12, 0x43, 0x6c, 0x65, 0x72, 0x6b,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x32, 0xae, 0x06, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x2b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x10, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x11,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x49,
	0x64, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1e, 0x53, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x07, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x1a, 0x08, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x03,
	0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x03,
	0x2e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x03,
	0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x03, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x32, 0xeb, 0x0d, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x72, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x1e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x20, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x07,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x07, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x08, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x08, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x03, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x13, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2b, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a,
	0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49,
	0x64, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0b, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x07, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03,
	0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x1b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x05, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x03, 0x2e, 0x49,
	0x64, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x06, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0a, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f,
	0x6d, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x06, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x42,
	0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x2f,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x0b, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x03, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x1a, 0x03, 0x2e, 0x49, 0x64, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0b, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x32, 0x56, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x08, 0x2e, 0x4e,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x12, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0x00, 0x32, 0x57, 0x0a, 0x17,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_copy_proto_rawDescOnce sync.Once
	file_proto_copy_proto_rawDescData = file_proto_copy_proto_rawDesc
)

func file_proto_copy_proto_rawDescGZIP() []byte {
	file_proto_copy_proto_rawDescOnce.Do(func() {
		file_proto_copy_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_copy_proto_rawDescData)
	})
	return file_proto_copy_proto_rawDescData
}

var file_proto_copy_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_copy_proto_goTypes = []interface{}{
	(*NoParam)(nil),              // 0: NoParam
	(*StatusObject)(nil),         // 1: StatusObject
	(*UploaderAccessObject)(nil), // 2: UploaderAccessObject
	(*Pagination)(nil),           // 3: Pagination
	(*IncomingOrder)(nil),        // 4: IncomingOrder
	(*Collection)(nil),           // 5: Collection
	(*Collections)(nil),          // 6: Collections
	(*CollectionAlias)(nil),      // 7: CollectionAlias
	(*CollectionAliases)(nil),    // 8: CollectionAliases
	(*Id)(nil),                   // 9: Id
	(*Ids)(nil),                  // 10: Ids
	(*Tenant)(nil),               // 11: Tenant
	(*Tenants)(nil),              // 12: Tenants
	(*Status)(nil),               // 13: Status
	(*Object)(nil),               // 14: Object
	(*Objects)(nil),              // 15: Objects
	(*ObjectInstance)(nil),       // 16: ObjectInstance
	(*ObjectInstances)(nil),      // 17: ObjectInstances
	(*ObjectAndFiles)(nil),       // 18: ObjectAndFiles
	(*InstanceAndPartition)(nil), // 19: InstanceAndPartition
	(*StorageLocations)(nil),     // 20: StorageLocations
	(*StorageLocation)(nil),      // 21: StorageLocation
	(*StoragePartition)(nil),     // 22: StoragePartition
	(*StoragePartitions)(nil),    // 23: StoragePartitions
	(*SizeAndId)(nil),            // 24: SizeAndId
	(*File)(nil),                 // 25: File
	(*Files)(nil),                // 26: Files
	(*ObjectInstanceCheck)(nil),  // 27: ObjectInstanceCheck
	(*ObjectInstanceChecks)(nil), // 28: ObjectInstanceChecks
	(*MimeType)(nil),             // 29: MimeType
	(*MimeTypes)(nil),            // 30: MimeTypes
	(*Pronom)(nil),               // 31: Pronom
	(*Pronoms)(nil),              // 32: Pronoms
}
var file_proto_copy_proto_depIdxs = []int32{
	14, // 0: IncomingOrder.Object:type_name -> Object
	5,  // 1: Collections.collections:type_name -> Collection
	7,  // 2: CollectionAliases.CollectionAliases:type_name -> CollectionAlias
	9,  // 3: Ids.Ids:type_name -> Id
	11, // 4: Tenants.tenants:type_name -> Tenant
	14, // 5: Objects.Objects:type_name -> Object
	16, // 6: ObjectInstances.ObjectInstances:type_name -> ObjectInstance
	14, // 7: ObjectAndFiles.Object:type_name -> Object
	25, // 8: ObjectAndFiles.Files:type_name -> File
	16, // 9: InstanceAndPartition.ObjectInstance:type_name -> ObjectInstance
	22, // 10: InstanceAndPartition.storagePartition:type_name -> StoragePartition
	21, // 11: StorageLocations.storageLocations:type_name -> StorageLocation
	22, // 12: StoragePartitions.StoragePartitions:type_name -> StoragePartition
	25, // 13: Files.Files:type_name -> File
	27, // 14: ObjectInstanceChecks.ObjectInstanceChecks:type_name -> ObjectInstanceCheck
	29, // 15: MimeTypes.MimeTypes:type_name -> MimeType
	31, // 16: Pronoms.Pronoms:type_name -> Pronom
	4,  // 17: UploaderIngestService.CopyFile:input_type -> IncomingOrder
	2,  // 18: UploaderHandlerService.TenantHasAccess:input_type -> UploaderAccessObject
	18, // 19: UploaderHandlerService.SaveObjectAndFiles:input_type -> ObjectAndFiles
	1,  // 20: UploaderHandlerService.AlterStatus:input_type -> StatusObject
	22, // 21: ClerkIngestService.CreateStoragePartition:input_type -> StoragePartition
	7,  // 22: IngestHandlerService.GetStorageLocationsByCollectionAlias:input_type -> CollectionAlias
	7,  // 23: IngestHandlerService.GetCurrentStorageLocationsByCollectionAlias:input_type -> CollectionAlias
	24, // 24: IngestHandlerService.GetStoragePartitionForLocation:input_type -> SizeAndId
	19, // 25: IngestHandlerService.SaveInstanceAndUpdatePartition:input_type -> InstanceAndPartition
	9,  // 26: IngestHandlerService.GetStorageLocationById:input_type -> Id
	22, // 27: IngestHandlerService.GetAndSaveStoragePartitionWithRelevantAlias:input_type -> StoragePartition
	22, // 28: IngestHandlerService.UpdateStoragePartition:input_type -> StoragePartition
	7,  // 29: IngestHandlerService.GetObjectsByCollectionAlias:input_type -> CollectionAlias
	9,  // 30: IngestHandlerService.GetObjectsInstancesByObjectId:input_type -> Id
	16, // 31: IngestHandlerService.CreateObjectInstance:input_type -> ObjectInstance
	9,  // 32: IngestHandlerService.GetStoragePartitionsByStorageLocationId:input_type -> Id
	9,  // 33: IngestHandlerService.DeleteObjectInstance:input_type -> Id
	1,  // 34: IngestHandlerService.AlterStatus:input_type -> StatusObject
	9,  // 35: ClerkHandlerService.FindTenantById:input_type -> Id
	9,  // 36: ClerkHandlerService.DeleteTenant:input_type -> Id
	11, // 37: ClerkHandlerService.SaveTenant:input_type -> Tenant
	11, // 38: ClerkHandlerService.UpdateTenant:input_type -> Tenant
	0,  // 39: ClerkHandlerService.FindAllTenants:input_type -> NoParam
	9,  // 40: ClerkHandlerService.GetStorageLocationsByTenantId:input_type -> Id
	21, // 41: ClerkHandlerService.SaveStorageLocation:input_type -> StorageLocation
	9,  // 42: ClerkHandlerService.DeleteStorageLocationById:input_type -> Id
	9,  // 43: ClerkHandlerService.GetCollectionsByTenantId:input_type -> Id
	9,  // 44: ClerkHandlerService.GetCollectionById:input_type -> Id
	9,  // 45: ClerkHandlerService.DeleteCollectionById:input_type -> Id
	5,  // 46: ClerkHandlerService.CreateCollection:input_type -> Collection
	5,  // 47: ClerkHandlerService.UpdateCollection:input_type -> Collection
	9,  // 48: ClerkHandlerService.GetObjectById:input_type -> Id
	9,  // 49: ClerkHandlerService.GetObjectInstanceById:input_type -> Id
	9,  // 50: ClerkHandlerService.GetFileById:input_type -> Id
	9,  // 51: ClerkHandlerService.GetObjectInstanceCheckById:input_type -> Id
	9,  // 52: ClerkHandlerService.GetStorageLocationById:input_type -> Id
	9,  // 53: ClerkHandlerService.GetStoragePartitionById:input_type -> Id
	3,  // 54: ClerkHandlerService.FindAllTenantsPaginated:input_type -> Pagination
	3,  // 55: ClerkHandlerService.GetCollectionsByTenantIdPaginated:input_type -> Pagination
	3,  // 56: ClerkHandlerService.GetObjectsByCollectionIdPaginated:input_type -> Pagination
	3,  // 57: ClerkHandlerService.GetFilesByCollectionIdPaginated:input_type -> Pagination
	3,  // 58: ClerkHandlerService.GetMimeTypesForCollectionId:input_type -> Pagination
	3,  // 59: ClerkHandlerService.GetPronomsForCollectionId:input_type -> Pagination
	3,  // 60: ClerkHandlerService.GetObjectInstancesByObjectIdPaginated:input_type -> Pagination
	3,  // 61: ClerkHandlerService.GetFilesByObjectIdPaginated:input_type -> Pagination
	3,  // 62: ClerkHandlerService.GetObjectInstanceChecksByObjectInstanceIdPaginated:input_type -> Pagination
	3,  // 63: ClerkHandlerService.GetStorageLocationsByTenantIdPaginated:input_type -> Pagination
	3,  // 64: ClerkHandlerService.GetStoragePartitionsByLocationIdPaginated:input_type -> Pagination
	3,  // 65: ClerkHandlerService.GetObjectInstancesByStoragePartitionIdPaginated:input_type -> Pagination
	9,  // 66: ClerkHandlerService.CheckStatus:input_type -> Id
	1,  // 67: ClerkHandlerService.CreateStatus:input_type -> StatusObject
	1,  // 68: ClerkHandlerService.AlterStatus:input_type -> StatusObject
	0,  // 69: DispatcherHandlerService.GetLowQualityCollections:input_type -> NoParam
	8,  // 70: DispatcherIngestService.ChangeQualityForCollections:input_type -> CollectionAliases
	13, // 71: UploaderIngestService.CopyFile:output_type -> Status
	13, // 72: UploaderHandlerService.TenantHasAccess:output_type -> Status
	9,  // 73: UploaderHandlerService.SaveObjectAndFiles:output_type -> Id
	13, // 74: UploaderHandlerService.AlterStatus:output_type -> Status
	13, // 75: ClerkIngestService.CreateStoragePartition:output_type -> Status
	20, // 76: IngestHandlerService.GetStorageLocationsByCollectionAlias:output_type -> StorageLocations
	20, // 77: IngestHandlerService.GetCurrentStorageLocationsByCollectionAlias:output_type -> StorageLocations
	22, // 78: IngestHandlerService.GetStoragePartitionForLocation:output_type -> StoragePartition
	13, // 79: IngestHandlerService.SaveInstanceAndUpdatePartition:output_type -> Status
	21, // 80: IngestHandlerService.GetStorageLocationById:output_type -> StorageLocation
	22, // 81: IngestHandlerService.GetAndSaveStoragePartitionWithRelevantAlias:output_type -> StoragePartition
	13, // 82: IngestHandlerService.UpdateStoragePartition:output_type -> Status
	15, // 83: IngestHandlerService.GetObjectsByCollectionAlias:output_type -> Objects
	17, // 84: IngestHandlerService.GetObjectsInstancesByObjectId:output_type -> ObjectInstances
	9,  // 85: IngestHandlerService.CreateObjectInstance:output_type -> Id
	23, // 86: IngestHandlerService.GetStoragePartitionsByStorageLocationId:output_type -> StoragePartitions
	13, // 87: IngestHandlerService.DeleteObjectInstance:output_type -> Status
	13, // 88: IngestHandlerService.AlterStatus:output_type -> Status
	11, // 89: ClerkHandlerService.FindTenantById:output_type -> Tenant
	13, // 90: ClerkHandlerService.DeleteTenant:output_type -> Status
	13, // 91: ClerkHandlerService.SaveTenant:output_type -> Status
	13, // 92: ClerkHandlerService.UpdateTenant:output_type -> Status
	12, // 93: ClerkHandlerService.FindAllTenants:output_type -> Tenants
	20, // 94: ClerkHandlerService.GetStorageLocationsByTenantId:output_type -> StorageLocations
	13, // 95: ClerkHandlerService.SaveStorageLocation:output_type -> Status
	13, // 96: ClerkHandlerService.DeleteStorageLocationById:output_type -> Status
	6,  // 97: ClerkHandlerService.GetCollectionsByTenantId:output_type -> Collections
	5,  // 98: ClerkHandlerService.GetCollectionById:output_type -> Collection
	13, // 99: ClerkHandlerService.DeleteCollectionById:output_type -> Status
	13, // 100: ClerkHandlerService.CreateCollection:output_type -> Status
	13, // 101: ClerkHandlerService.UpdateCollection:output_type -> Status
	14, // 102: ClerkHandlerService.GetObjectById:output_type -> Object
	16, // 103: ClerkHandlerService.GetObjectInstanceById:output_type -> ObjectInstance
	25, // 104: ClerkHandlerService.GetFileById:output_type -> File
	27, // 105: ClerkHandlerService.GetObjectInstanceCheckById:output_type -> ObjectInstanceCheck
	21, // 106: ClerkHandlerService.GetStorageLocationById:output_type -> StorageLocation
	22, // 107: ClerkHandlerService.GetStoragePartitionById:output_type -> StoragePartition
	12, // 108: ClerkHandlerService.FindAllTenantsPaginated:output_type -> Tenants
	6,  // 109: ClerkHandlerService.GetCollectionsByTenantIdPaginated:output_type -> Collections
	15, // 110: ClerkHandlerService.GetObjectsByCollectionIdPaginated:output_type -> Objects
	26, // 111: ClerkHandlerService.GetFilesByCollectionIdPaginated:output_type -> Files
	30, // 112: ClerkHandlerService.GetMimeTypesForCollectionId:output_type -> MimeTypes
	32, // 113: ClerkHandlerService.GetPronomsForCollectionId:output_type -> Pronoms
	17, // 114: ClerkHandlerService.GetObjectInstancesByObjectIdPaginated:output_type -> ObjectInstances
	26, // 115: ClerkHandlerService.GetFilesByObjectIdPaginated:output_type -> Files
	28, // 116: ClerkHandlerService.GetObjectInstanceChecksByObjectInstanceIdPaginated:output_type -> ObjectInstanceChecks
	20, // 117: ClerkHandlerService.GetStorageLocationsByTenantIdPaginated:output_type -> StorageLocations
	23, // 118: ClerkHandlerService.GetStoragePartitionsByLocationIdPaginated:output_type -> StoragePartitions
	17, // 119: ClerkHandlerService.GetObjectInstancesByStoragePartitionIdPaginated:output_type -> ObjectInstances
	1,  // 120: ClerkHandlerService.CheckStatus:output_type -> StatusObject
	9,  // 121: ClerkHandlerService.CreateStatus:output_type -> Id
	13, // 122: ClerkHandlerService.AlterStatus:output_type -> Status
	8,  // 123: DispatcherHandlerService.GetLowQualityCollections:output_type -> CollectionAliases
	13, // 124: DispatcherIngestService.ChangeQualityForCollections:output_type -> Status
	71, // [71:125] is the sub-list for method output_type
	17, // [17:71] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_copy_proto_init() }
func file_proto_copy_proto_init() {
	if File_proto_copy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_copy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploaderAccessObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Objects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAndFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAndPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageLocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePartitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SizeAndId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Files); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInstanceCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInstanceChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MimeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MimeTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pronom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_copy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pronoms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_copy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_proto_copy_proto_goTypes,
		DependencyIndexes: file_proto_copy_proto_depIdxs,
		MessageInfos:      file_proto_copy_proto_msgTypes,
	}.Build()
	File_proto_copy_proto = out.File
	file_proto_copy_proto_rawDesc = nil
	file_proto_copy_proto_goTypes = nil
	file_proto_copy_proto_depIdxs = nil
}
